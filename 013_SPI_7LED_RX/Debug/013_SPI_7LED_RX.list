
013_SPI_7LED_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002614  08002614  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002614  08002614  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002614  08002614  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002614  08002614  00003614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002618  08002618  00003618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800261c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000014  08002630  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002630  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005109  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001383  00000000  00000000  00009145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000455  00000000  00000000  0000aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f124  00000000  00000000  0000aef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007628  00000000  00000000  0001a019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a22a  00000000  00000000  00021641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007b86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001358  00000000  00000000  0007b8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0007cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025cc 	.word	0x080025cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080025cc 	.word	0x080025cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
rx_data[0]=0;
 8000224:	4b2a      	ldr	r3, [pc, #168]	@ (80002d0 <main+0xb0>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fb61 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f855 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8d1 	bl	80003d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000236:	f000 f891 	bl	800035c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	  nrf24_config(40, 7);
 800023a:	2107      	movs	r1, #7
 800023c:	2028      	movs	r0, #40	@ 0x28
 800023e:	f000 f973 	bl	8000528 <nrf24_config>
      nrf24_rx_address(rx_address);
 8000242:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <main+0xb4>)
 8000244:	0018      	movs	r0, r3
 8000246:	f000 f99c 	bl	8000582 <nrf24_rx_address>
      nrf24_rx_mode();
 800024a:	f000 f9a8 	bl	800059e <nrf24_rx_mode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if (nrf24_dataReady()) // Veri var mı?
 800024e:	f000 f9b4 	bl	80005ba <nrf24_dataReady>
 8000252:	1e03      	subs	r3, r0, #0
 8000254:	d0fb      	beq.n	800024e <main+0x2e>
	        {
	            nrf24_getData((uint8_t*)rx_data, 7); // Gelen veriyi al
 8000256:	4b1e      	ldr	r3, [pc, #120]	@ (80002d0 <main+0xb0>)
 8000258:	2107      	movs	r1, #7
 800025a:	0018      	movs	r0, r3
 800025c:	f000 f9c0 	bl	80005e0 <nrf24_getData>

	            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000260:	2390      	movs	r3, #144	@ 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2120      	movs	r1, #32
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fe0b 	bl	8000e82 <HAL_GPIO_TogglePin>

	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, rx_data[0]);
 800026c:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <main+0xb0>)
 800026e:	781a      	ldrb	r2, [r3, #0]
 8000270:	2390      	movs	r3, #144	@ 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2101      	movs	r1, #1
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fde6 	bl	8000e48 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, rx_data[1]);
 800027c:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <main+0xb0>)
 800027e:	785a      	ldrb	r2, [r3, #1]
 8000280:	2390      	movs	r3, #144	@ 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2102      	movs	r1, #2
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fdde 	bl	8000e48 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, rx_data[2]);
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <main+0xb0>)
 800028e:	789a      	ldrb	r2, [r3, #2]
 8000290:	2380      	movs	r3, #128	@ 0x80
 8000292:	0159      	lsls	r1, r3, #5
 8000294:	2390      	movs	r3, #144	@ 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fdd5 	bl	8000e48 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, rx_data[3]);
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <main+0xb0>)
 80002a0:	78da      	ldrb	r2, [r3, #3]
 80002a2:	2390      	movs	r3, #144	@ 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2110      	movs	r1, #16
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fdcd 	bl	8000e48 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, rx_data[4]);
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <main+0xb0>)
 80002b0:	791b      	ldrb	r3, [r3, #4]
 80002b2:	4809      	ldr	r0, [pc, #36]	@ (80002d8 <main+0xb8>)
 80002b4:	001a      	movs	r2, r3
 80002b6:	2101      	movs	r1, #1
 80002b8:	f000 fdc6 	bl	8000e48 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, rx_data[5]);
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <main+0xb0>)
 80002be:	795a      	ldrb	r2, [r3, #5]
 80002c0:	2380      	movs	r3, #128	@ 0x80
 80002c2:	0219      	lsls	r1, r3, #8
 80002c4:	2390      	movs	r3, #144	@ 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fdbd 	bl	8000e48 <HAL_GPIO_WritePin>
	   if (nrf24_dataReady()) // Veri var mı?
 80002ce:	e7be      	b.n	800024e <main+0x2e>
 80002d0:	20000094 	.word	0x20000094
 80002d4:	20000000 	.word	0x20000000
 80002d8:	48000400 	.word	0x48000400

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b091      	sub	sp, #68	@ 0x44
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	2410      	movs	r4, #16
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	0018      	movs	r0, r3
 80002e8:	2330      	movs	r3, #48	@ 0x30
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 f941 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	003b      	movs	r3, r7
 80002f4:	0018      	movs	r0, r3
 80002f6:	2310      	movs	r3, #16
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 f93a 	bl	8002574 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	0021      	movs	r1, r4
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fdcb 	bl	8000eb8 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000326:	f000 f8f9 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	003b      	movs	r3, r7
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	003b      	movs	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	2100      	movs	r1, #0
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f8d0 	bl	80014ec <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000350:	f000 f8e4 	bl	800051c <Error_Handler>
  }
}
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b011      	add	sp, #68	@ 0x44
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_SPI1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000368:	2282      	movs	r2, #130	@ 0x82
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000376:	22e0      	movs	r2, #224	@ 0xe0
 8000378:	00d2      	lsls	r2, r2, #3
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800038a:	2280      	movs	r2, #128	@ 0x80
 800038c:	0092      	lsls	r2, r2, #2
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ba:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 f9b9 	bl	8001734 <HAL_SPI_Init>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f8a9 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000030 	.word	0x20000030
 80003d4:	40013000 	.word	0x40013000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b089      	sub	sp, #36	@ 0x24
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	240c      	movs	r4, #12
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0018      	movs	r0, r3
 80003e4:	2314      	movs	r3, #20
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f002 f8c3 	bl	8002574 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b46      	ldr	r3, [pc, #280]	@ (8000508 <MX_GPIO_Init+0x130>)
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b45      	ldr	r3, [pc, #276]	@ (8000508 <MX_GPIO_Init+0x130>)
 80003f4:	2180      	movs	r1, #128	@ 0x80
 80003f6:	0289      	lsls	r1, r1, #10
 80003f8:	430a      	orrs	r2, r1
 80003fa:	615a      	str	r2, [r3, #20]
 80003fc:	4b42      	ldr	r3, [pc, #264]	@ (8000508 <MX_GPIO_Init+0x130>)
 80003fe:	695a      	ldr	r2, [r3, #20]
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	029b      	lsls	r3, r3, #10
 8000404:	4013      	ands	r3, r2
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b3f      	ldr	r3, [pc, #252]	@ (8000508 <MX_GPIO_Init+0x130>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b3e      	ldr	r3, [pc, #248]	@ (8000508 <MX_GPIO_Init+0x130>)
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	02c9      	lsls	r1, r1, #11
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b3b      	ldr	r3, [pc, #236]	@ (8000508 <MX_GPIO_Init+0x130>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	02db      	lsls	r3, r3, #11
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000426:	4939      	ldr	r1, [pc, #228]	@ (800050c <MX_GPIO_Init+0x134>)
 8000428:	2390      	movs	r3, #144	@ 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2200      	movs	r2, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f000 fd0a 	bl	8000e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8000434:	4936      	ldr	r1, [pc, #216]	@ (8000510 <MX_GPIO_Init+0x138>)
 8000436:	4b37      	ldr	r3, [pc, #220]	@ (8000514 <MX_GPIO_Init+0x13c>)
 8000438:	2200      	movs	r2, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fd04 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2201      	movs	r2, #1
 8000444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2201      	movs	r2, #1
 800044a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2201      	movs	r2, #1
 8000450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2201      	movs	r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	193a      	adds	r2, r7, r4
 800045a:	2390      	movs	r3, #144	@ 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fb81 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12
 8000466:	193b      	adds	r3, r7, r4
 8000468:	4a2b      	ldr	r2, [pc, #172]	@ (8000518 <MX_GPIO_Init+0x140>)
 800046a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2201      	movs	r2, #1
 8000470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2201      	movs	r2, #1
 8000476:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	193a      	adds	r2, r7, r4
 8000480:	2390      	movs	r3, #144	@ 0x90
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fb6e 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2220      	movs	r2, #32
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	2390      	movs	r3, #144	@ 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fb5b 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2201      	movs	r2, #1
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2201      	movs	r2, #1
 80004c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	4a11      	ldr	r2, [pc, #68]	@ (8000514 <MX_GPIO_Init+0x13c>)
 80004ce:	0019      	movs	r1, r3
 80004d0:	0010      	movs	r0, r2
 80004d2:	f000 fb49 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80004d6:	0021      	movs	r1, r4
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	22c0      	movs	r2, #192	@ 0xc0
 80004dc:	00d2      	lsls	r2, r2, #3
 80004de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2201      	movs	r2, #1
 80004e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2203      	movs	r2, #3
 80004f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <MX_GPIO_Init+0x13c>)
 80004f6:	0019      	movs	r1, r3
 80004f8:	0010      	movs	r0, r2
 80004fa:	f000 fb35 	bl	8000b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b009      	add	sp, #36	@ 0x24
 8000504:	bd90      	pop	{r4, r7, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	40021000 	.word	0x40021000
 800050c:	0000903b 	.word	0x0000903b
 8000510:	00000601 	.word	0x00000601
 8000514:	48000400 	.word	0x48000400
 8000518:	0000901a 	.word	0x0000901a

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <Error_Handler+0x8>

08000528 <nrf24_config>:
    HAL_Delay(5);
}

// **RF Modülü Konfigürasyonu**
void nrf24_config(uint8_t channel, uint8_t payloadSize)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	0002      	movs	r2, r0
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	1c0a      	adds	r2, r1, #0
 8000538:	701a      	strb	r2, [r3, #0]
    nrf24_writeRegister(0x05, channel);  // RF Kanalı
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	0019      	movs	r1, r3
 8000540:	2005      	movs	r0, #5
 8000542:	f000 f875 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x11, payloadSize);  // RX Payload boyutu
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0019      	movs	r1, r3
 800054c:	2011      	movs	r0, #17
 800054e:	f000 f86f 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x01, 0x01);  // Auto ACK Açık
 8000552:	2101      	movs	r1, #1
 8000554:	2001      	movs	r0, #1
 8000556:	f000 f86b 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x02, 0x01);  // Data Pipe 0 Aktif
 800055a:	2101      	movs	r1, #1
 800055c:	2002      	movs	r0, #2
 800055e:	f000 f867 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x03, 0x03);  // Adres genişliği 5 bayt
 8000562:	2103      	movs	r1, #3
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f863 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x06, 0x07);  // Data rate: 1Mbps, Güç: 0dBm
 800056a:	2107      	movs	r1, #7
 800056c:	2006      	movs	r0, #6
 800056e:	f000 f85f 	bl	8000630 <nrf24_writeRegister>
    nrf24_writeRegister(0x00, 0x0E);  // CRC ve güç açık
 8000572:	210e      	movs	r1, #14
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f85b 	bl	8000630 <nrf24_writeRegister>
}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}

08000582 <nrf24_rx_address>:
    nrf24_writeRegisterMulti(0x0A, address, 5);
}

// **Alıcı Adresi Ayarla**
void nrf24_rx_address(uint8_t *address)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
    nrf24_writeRegisterMulti(0x0A, address, 5);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2205      	movs	r2, #5
 800058e:	0019      	movs	r1, r3
 8000590:	200a      	movs	r0, #10
 8000592:	f000 f875 	bl	8000680 <nrf24_writeRegisterMulti>
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}

0800059e <nrf24_rx_mode>:
    HAL_Delay(1);
}

// **Alıcı Moduna Geç**
void nrf24_rx_mode(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
    nrf24_writeRegister(0x00, 0x0F);
 80005a2:	210f      	movs	r1, #15
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f843 	bl	8000630 <nrf24_writeRegister>
    nrf24_ceHigh();
 80005aa:	f000 f8bd 	bl	8000728 <nrf24_ceHigh>
    HAL_Delay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fa02 	bl	80009b8 <HAL_Delay>
}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <nrf24_dataReady>:
}


// **Gelen Veri Var mı?**
uint8_t nrf24_dataReady(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
    uint8_t status;
    nrf24_readRegisterMulti(0x07, &status, 1);
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	2201      	movs	r2, #1
 80005c4:	0019      	movs	r1, r3
 80005c6:	2007      	movs	r0, #7
 80005c8:	f000 f886 	bl	80006d8 <nrf24_readRegisterMulti>
    return (status & 0x40); // RX flag kontrolü
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2240      	movs	r2, #64	@ 0x40
 80005d2:	4013      	ands	r3, r2
 80005d4:	b2db      	uxtb	r3, r3
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <nrf24_getData>:

// **Veriyi Oku**
void nrf24_getData(uint8_t *data, uint8_t length)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	000a      	movs	r2, r1
 80005ea:	1cfb      	adds	r3, r7, #3
 80005ec:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80005ee:	f000 f8b7 	bl	8000760 <nrf24_csnLow>

    // RX FIFO'dan veri okumak için komut gönder
    uint8_t command = NRF24_CMD_R_RX_PAYLOAD;
 80005f2:	210f      	movs	r1, #15
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2261      	movs	r2, #97	@ 0x61
 80005f8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80005fa:	1879      	adds	r1, r7, r1
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <nrf24_getData+0x4c>)
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	f001 f94f 	bl	80018a4 <HAL_SPI_Transmit>

    // Veriyi oku (length kadar bayt)
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b29a      	uxth	r2, r3
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4807      	ldr	r0, [pc, #28]	@ (800062c <nrf24_getData+0x4c>)
 8000610:	2364      	movs	r3, #100	@ 0x64
 8000612:	f001 faa7 	bl	8001b64 <HAL_SPI_Receive>

    nrf24_csnHigh();
 8000616:	f000 f895 	bl	8000744 <nrf24_csnHigh>

    // RX flag temizle
    nrf24_writeRegister(0x07, 0x40);
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	2007      	movs	r0, #7
 800061e:	f000 f807 	bl	8000630 <nrf24_writeRegister>
}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b004      	add	sp, #16
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	20000030 	.word	0x20000030

08000630 <nrf24_writeRegister>:

// **SPI Register Yaz**
static void nrf24_writeRegister(uint8_t reg, uint8_t value)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	0002      	movs	r2, r0
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	1c0a      	adds	r2, r1, #0
 8000640:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000642:	f000 f88d 	bl	8000760 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2220      	movs	r2, #32
 800064c:	4313      	orrs	r3, r2
 800064e:	b2da      	uxtb	r2, r3
 8000650:	210f      	movs	r1, #15
 8000652:	187b      	adds	r3, r7, r1
 8000654:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 8000656:	1879      	adds	r1, r7, r1
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <nrf24_writeRegister+0x4c>)
 800065a:	2364      	movs	r3, #100	@ 0x64
 800065c:	2201      	movs	r2, #1
 800065e:	f001 f921 	bl	80018a4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, &value, 1, 100);
 8000662:	1db9      	adds	r1, r7, #6
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <nrf24_writeRegister+0x4c>)
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	2201      	movs	r2, #1
 800066a:	f001 f91b 	bl	80018a4 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 800066e:	f000 f869 	bl	8000744 <nrf24_csnHigh>
}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	20000030 	.word	0x20000030

08000680 <nrf24_writeRegisterMulti>:

// **SPI Register Çoklu Yaz**
static void nrf24_writeRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6039      	str	r1, [r7, #0]
 8000688:	0011      	movs	r1, r2
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	1c02      	adds	r2, r0, #0
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	1c0a      	adds	r2, r1, #0
 8000694:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000696:	f000 f863 	bl	8000760 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2220      	movs	r2, #32
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	210f      	movs	r1, #15
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80006aa:	1879      	adds	r1, r7, r1
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <nrf24_writeRegisterMulti+0x54>)
 80006ae:	2364      	movs	r3, #100	@ 0x64
 80006b0:	2201      	movs	r2, #1
 80006b2:	f001 f8f7 	bl	80018a4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 80006b6:	1dbb      	adds	r3, r7, #6
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	6839      	ldr	r1, [r7, #0]
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <nrf24_writeRegisterMulti+0x54>)
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	f001 f8ef 	bl	80018a4 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 80006c6:	f000 f83d 	bl	8000744 <nrf24_csnHigh>
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b004      	add	sp, #16
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	20000030 	.word	0x20000030

080006d8 <nrf24_readRegisterMulti>:

// **SPI Register Çoklu Oku**
static void nrf24_readRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6039      	str	r1, [r7, #0]
 80006e0:	0011      	movs	r1, r2
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	1c02      	adds	r2, r0, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80006ee:	f000 f837 	bl	8000760 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_R_REGISTER | reg;
 80006f2:	210f      	movs	r1, #15
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80006fc:	1879      	adds	r1, r7, r1
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <nrf24_readRegisterMulti+0x4c>)
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	f001 f8ce 	bl	80018a4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b29a      	uxth	r2, r3
 800070e:	6839      	ldr	r1, [r7, #0]
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <nrf24_readRegisterMulti+0x4c>)
 8000712:	2364      	movs	r3, #100	@ 0x64
 8000714:	f001 fa26 	bl	8001b64 <HAL_SPI_Receive>
    nrf24_csnHigh();
 8000718:	f000 f814 	bl	8000744 <nrf24_csnHigh>
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b004      	add	sp, #16
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000030 	.word	0x20000030

08000728 <nrf24_ceHigh>:

// **CE Yüksek (Aktif)**
static void nrf24_ceHigh(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET);
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <nrf24_ceHigh+0x18>)
 8000732:	2201      	movs	r2, #1
 8000734:	0019      	movs	r1, r3
 8000736:	f000 fb87 	bl	8000e48 <HAL_GPIO_WritePin>
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	48000400 	.word	0x48000400

08000744 <nrf24_csnHigh>:
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET);
}

// **CSN Yüksek (İşlem Yok)**
static void nrf24_csnHigh(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_SET);
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <nrf24_csnHigh+0x18>)
 800074e:	2201      	movs	r2, #1
 8000750:	0019      	movs	r1, r3
 8000752:	f000 fb79 	bl	8000e48 <HAL_GPIO_WritePin>
}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	48000400 	.word	0x48000400

08000760 <nrf24_csnLow>:

// **CSN Düşük (İşlem Başlat)**
static void nrf24_csnLow(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_RESET);
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <nrf24_csnLow+0x18>)
 800076a:	2200      	movs	r2, #0
 800076c:	0019      	movs	r1, r3
 800076e:	f000 fb6b 	bl	8000e48 <HAL_GPIO_WritePin>
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	48000400 	.word	0x48000400

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <HAL_MspInit+0x44>)
 8000784:	699a      	ldr	r2, [r3, #24]
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <HAL_MspInit+0x44>)
 8000788:	2101      	movs	r1, #1
 800078a:	430a      	orrs	r2, r1
 800078c:	619a      	str	r2, [r3, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_MspInit+0x44>)
 800079c:	69da      	ldr	r2, [r3, #28]
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <HAL_MspInit+0x44>)
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	0549      	lsls	r1, r1, #21
 80007a4:	430a      	orrs	r2, r1
 80007a6:	61da      	str	r2, [r3, #28]
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_MspInit+0x44>)
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	2380      	movs	r3, #128	@ 0x80
 80007ae:	055b      	lsls	r3, r3, #21
 80007b0:	4013      	ands	r3, r2
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	@ 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2414      	movs	r4, #20
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f001 fecc 	bl	8002574 <memset>
  if(hspi->Instance==SPI1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <HAL_SPI_MspInit+0x90>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d131      	bne.n	800084a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 80007e8:	699a      	ldr	r2, [r3, #24]
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	0149      	lsls	r1, r1, #5
 80007f0:	430a      	orrs	r2, r1
 80007f2:	619a      	str	r2, [r3, #24]
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	2380      	movs	r3, #128	@ 0x80
 80007fa:	015b      	lsls	r3, r3, #5
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	02c9      	lsls	r1, r1, #11
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_SPI_MspInit+0x94>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2238      	movs	r2, #56	@ 0x38
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2202      	movs	r2, #2
 800082a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2203      	movs	r2, #3
 8000836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_SPI_MspInit+0x98>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 f98f 	bl	8000b68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00b      	add	sp, #44	@ 0x2c
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40013000 	.word	0x40013000
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f87a 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a0:	f7ff fff7 	bl	8000892 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ca:	f001 fe5b 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fca7 	bl	8000220 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   r0, =_estack
 80008d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008e0:	0800261c 	.word	0x0800261c
  ldr r2, =_sbss
 80008e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008e8:	200000a0 	.word	0x200000a0

080008ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_IRQHandler>
	...

080008f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_Init+0x24>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_Init+0x24>)
 80008fa:	2110      	movs	r1, #16
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f809 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000906:	f7ff ff39 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_InitTick+0x5c>)
 8000922:	681c      	ldr	r4, [r3, #0]
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_InitTick+0x60>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	23fa      	movs	r3, #250	@ 0xfa
 800092c:	0098      	lsls	r0, r3, #2
 800092e:	f7ff fbeb 	bl	8000108 <__udivsi3>
 8000932:	0003      	movs	r3, r0
 8000934:	0019      	movs	r1, r3
 8000936:	0020      	movs	r0, r4
 8000938:	f7ff fbe6 	bl	8000108 <__udivsi3>
 800093c:	0003      	movs	r3, r0
 800093e:	0018      	movs	r0, r3
 8000940:	f000 f905 	bl	8000b4e <HAL_SYSTICK_Config>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	e00f      	b.n	800096c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d80b      	bhi.n	800096a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	2200      	movs	r2, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f8e2 	bl	8000b24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_InitTick+0x64>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b003      	add	sp, #12
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	20000008 	.word	0x20000008
 8000978:	20000010 	.word	0x20000010
 800097c:	2000000c 	.word	0x2000000c

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	18d2      	adds	r2, r2, r3
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <HAL_IncTick+0x20>)
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20000010 	.word	0x20000010
 80009a0:	2000009c 	.word	0x2000009c

080009a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	2000009c 	.word	0x2000009c

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff fff0 	bl	80009a4 <HAL_GetTick>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	001a      	movs	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	f7ff ffe0 	bl	80009a4 <HAL_GetTick>
 80009e4:	0002      	movs	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b004      	add	sp, #16
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	20000010 	.word	0x20000010

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a14:	d828      	bhi.n	8000a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	33c0      	adds	r3, #192	@ 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	589b      	ldr	r3, [r3, r2]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	33c0      	adds	r3, #192	@ 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a66:	e031      	b.n	8000acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0019      	movs	r1, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	400b      	ands	r3, r1
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3306      	adds	r3, #6
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3304      	adds	r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	@ 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	@ 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18c3      	adds	r3, r0, r3
 8000ac8:	3304      	adds	r3, #4
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d301      	bcc.n	8000af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af0:	2301      	movs	r3, #1
 8000af2:	e010      	b.n	8000b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <SysTick_Config+0x44>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff7c 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SysTick_Config+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SysTick_Config+0x44>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffbf 	bl	8000adc <SysTick_Config>
 8000b5e:	0003      	movs	r3, r0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e14f      	b.n	8000e18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x28>
 8000b8e:	e140      	b.n	8000e12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23c0      	movs	r3, #192	@ 0xc0
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x174>
 8000cda:	e09a      	b.n	8000e12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b54      	ldr	r3, [pc, #336]	@ (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000cde:	699a      	ldr	r2, [r3, #24]
 8000ce0:	4b53      	ldr	r3, [pc, #332]	@ (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	619a      	str	r2, [r3, #24]
 8000ce8:	4b51      	ldr	r3, [pc, #324]	@ (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	589b      	ldr	r3, [r3, r2]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	2390      	movs	r3, #144	@ 0x90
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a44      	ldr	r2, [pc, #272]	@ (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x1de>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a43      	ldr	r2, [pc, #268]	@ (8000e3c <HAL_GPIO_Init+0x2d4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x1da>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a42      	ldr	r2, [pc, #264]	@ (8000e40 <HAL_GPIO_Init+0x2d8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x1d6>
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	2103      	movs	r1, #3
 8000d50:	400a      	ands	r2, r1
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	@ (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	035b      	lsls	r3, r3, #13
 8000d82:	4013      	ands	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	039b      	lsls	r3, r3, #14
 8000dac:	4013      	ands	r3, r2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	1e13      	subs	r3, r2, #0
 8000e22:	d000      	beq.n	8000e26 <HAL_GPIO_Init+0x2be>
 8000e24:	e6a8      	b.n	8000b78 <HAL_GPIO_Init+0x10>
  } 
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	48000c00 	.word	0x48000c00
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	0008      	movs	r0, r1
 8000e52:	0011      	movs	r1, r2
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	1c02      	adds	r2, r0, #0
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	1c7b      	adds	r3, r7, #1
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	1c7b      	adds	r3, r7, #1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	1cbb      	adds	r3, r7, #2
 8000e8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e96:	1cbb      	adds	r3, r7, #2
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	041a      	lsls	r2, r3, #16
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	1cb9      	adds	r1, r7, #2
 8000ea6:	8809      	ldrh	r1, [r1, #0]
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	619a      	str	r2, [r3, #24]
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e301      	b.n	80014ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x1e>
 8000ed4:	e08d      	b.n	8000ff2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ed6:	4bc3      	ldr	r3, [pc, #780]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	220c      	movs	r2, #12
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d00e      	beq.n	8000f00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee2:	4bc0      	ldr	r3, [pc, #768]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d116      	bne.n	8000f1c <HAL_RCC_OscConfig+0x64>
 8000eee:	4bbd      	ldr	r3, [pc, #756]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	2380      	movs	r3, #128	@ 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d10d      	bne.n	8000f1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	4bb8      	ldr	r3, [pc, #736]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <HAL_RCC_OscConfig+0x56>
 8000f0c:	e070      	b.n	8000ff0 <HAL_RCC_OscConfig+0x138>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d000      	beq.n	8000f18 <HAL_RCC_OscConfig+0x60>
 8000f16:	e06b      	b.n	8000ff0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e2d8      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d107      	bne.n	8000f34 <HAL_RCC_OscConfig+0x7c>
 8000f24:	4baf      	ldr	r3, [pc, #700]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4bae      	ldr	r3, [pc, #696]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e02f      	b.n	8000f94 <HAL_RCC_OscConfig+0xdc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <HAL_RCC_OscConfig+0x9e>
 8000f3c:	4ba9      	ldr	r3, [pc, #676]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4ba8      	ldr	r3, [pc, #672]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f42:	49a9      	ldr	r1, [pc, #676]	@ (80011e8 <HAL_RCC_OscConfig+0x330>)
 8000f44:	400a      	ands	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	4ba6      	ldr	r3, [pc, #664]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4ba5      	ldr	r3, [pc, #660]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	49a7      	ldr	r1, [pc, #668]	@ (80011ec <HAL_RCC_OscConfig+0x334>)
 8000f50:	400a      	ands	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e01e      	b.n	8000f94 <HAL_RCC_OscConfig+0xdc>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d10e      	bne.n	8000f7c <HAL_RCC_OscConfig+0xc4>
 8000f5e:	4ba1      	ldr	r3, [pc, #644]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	02c9      	lsls	r1, r1, #11
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	4b9d      	ldr	r3, [pc, #628]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b9c      	ldr	r3, [pc, #624]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	0249      	lsls	r1, r1, #9
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xdc>
 8000f7c:	4b99      	ldr	r3, [pc, #612]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b98      	ldr	r3, [pc, #608]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	4999      	ldr	r1, [pc, #612]	@ (80011e8 <HAL_RCC_OscConfig+0x330>)
 8000f84:	400a      	ands	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	4b96      	ldr	r3, [pc, #600]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b95      	ldr	r3, [pc, #596]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	4997      	ldr	r1, [pc, #604]	@ (80011ec <HAL_RCC_OscConfig+0x334>)
 8000f90:	400a      	ands	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d014      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd02 	bl	80009a4 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fcfd 	bl	80009a4 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	@ 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e28a      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb8:	4b8a      	ldr	r3, [pc, #552]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d0f0      	beq.n	8000fa6 <HAL_RCC_OscConfig+0xee>
 8000fc4:	e015      	b.n	8000ff2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fced 	bl	80009a4 <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fce8 	bl	80009a4 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	@ 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e275      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	4b80      	ldr	r3, [pc, #512]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x118>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x146>
 8000ffc:	e069      	b.n	80010d2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ffe:	4b79      	ldr	r3, [pc, #484]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	220c      	movs	r2, #12
 8001004:	4013      	ands	r3, r2
 8001006:	d00b      	beq.n	8001020 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001008:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	220c      	movs	r2, #12
 800100e:	4013      	ands	r3, r2
 8001010:	2b08      	cmp	r3, #8
 8001012:	d11c      	bne.n	800104e <HAL_RCC_OscConfig+0x196>
 8001014:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	2380      	movs	r3, #128	@ 0x80
 800101a:	025b      	lsls	r3, r3, #9
 800101c:	4013      	ands	r3, r2
 800101e:	d116      	bne.n	800104e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001020:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2202      	movs	r2, #2
 8001026:	4013      	ands	r3, r2
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x17e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e24b      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b6b      	ldr	r3, [pc, #428]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	22f8      	movs	r2, #248	@ 0xf8
 800103c:	4393      	bics	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	00da      	lsls	r2, r3, #3
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104c:	e041      	b.n	80010d2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d024      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001056:	4b63      	ldr	r3, [pc, #396]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b62      	ldr	r3, [pc, #392]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc9f 	bl	80009a4 <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc9a 	bl	80009a4 <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e227      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b59      	ldr	r3, [pc, #356]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d0f1      	beq.n	800106c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b56      	ldr	r3, [pc, #344]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	22f8      	movs	r2, #248	@ 0xf8
 800108e:	4393      	bics	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e018      	b.n	80010d2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a0:	4b50      	ldr	r3, [pc, #320]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc7a 	bl	80009a4 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc75 	bl	80009a4 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e202      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c8:	4b46      	ldr	r3, [pc, #280]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2202      	movs	r2, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d1f1      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	4013      	ands	r3, r2
 80010da:	d036      	beq.n	800114a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d019      	beq.n	8001118 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e4:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010e8:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fc58 	bl	80009a4 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc53 	bl	80009a4 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1e0      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110c:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d0f1      	beq.n	80010fa <HAL_RCC_OscConfig+0x242>
 8001116:	e018      	b.n	800114a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800111a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800111e:	2101      	movs	r1, #1
 8001120:	438a      	bics	r2, r1
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fc3e 	bl	80009a4 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fc39 	bl	80009a4 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1c6      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d1f1      	bne.n	800112e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x29e>
 8001154:	e0b4      	b.n	80012c0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001156:	201f      	movs	r0, #31
 8001158:	183b      	adds	r3, r7, r0
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001160:	69da      	ldr	r2, [r3, #28]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	055b      	lsls	r3, r3, #21
 8001166:	4013      	ands	r3, r2
 8001168:	d110      	bne.n	800118c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	0549      	lsls	r1, r1, #21
 8001174:	430a      	orrs	r2, r1
 8001176:	61da      	str	r2, [r3, #28]
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 800117a:	69da      	ldr	r2, [r3, #28]
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	055b      	lsls	r3, r3, #21
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001186:	183b      	adds	r3, r7, r0
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_RCC_OscConfig+0x338>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d11a      	bne.n	80011ce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_RCC_OscConfig+0x338>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0049      	lsls	r1, r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fbfd 	bl	80009a4 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b0:	f7ff fbf8 	bl	80009a4 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	@ 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e185      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_RCC_OscConfig+0x338>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10e      	bne.n	80011f4 <HAL_RCC_OscConfig+0x33c>
 80011d6:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4b02      	ldr	r3, [pc, #8]	@ (80011e4 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	e035      	b.n	8001250 <HAL_RCC_OscConfig+0x398>
 80011e4:	40021000 	.word	0x40021000
 80011e8:	fffeffff 	.word	0xfffeffff
 80011ec:	fffbffff 	.word	0xfffbffff
 80011f0:	40007000 	.word	0x40007000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10c      	bne.n	8001216 <HAL_RCC_OscConfig+0x35e>
 80011fc:	4bb6      	ldr	r3, [pc, #728]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	4bb5      	ldr	r3, [pc, #724]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001202:	2101      	movs	r1, #1
 8001204:	438a      	bics	r2, r1
 8001206:	621a      	str	r2, [r3, #32]
 8001208:	4bb3      	ldr	r3, [pc, #716]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	4bb2      	ldr	r3, [pc, #712]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800120e:	2104      	movs	r1, #4
 8001210:	438a      	bics	r2, r1
 8001212:	621a      	str	r2, [r3, #32]
 8001214:	e01c      	b.n	8001250 <HAL_RCC_OscConfig+0x398>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x380>
 800121e:	4bae      	ldr	r3, [pc, #696]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	4bad      	ldr	r3, [pc, #692]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001224:	2104      	movs	r1, #4
 8001226:	430a      	orrs	r2, r1
 8001228:	621a      	str	r2, [r3, #32]
 800122a:	4bab      	ldr	r3, [pc, #684]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	4baa      	ldr	r3, [pc, #680]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	621a      	str	r2, [r3, #32]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0x398>
 8001238:	4ba7      	ldr	r3, [pc, #668]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	4ba6      	ldr	r3, [pc, #664]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800123e:	2101      	movs	r1, #1
 8001240:	438a      	bics	r2, r1
 8001242:	621a      	str	r2, [r3, #32]
 8001244:	4ba4      	ldr	r3, [pc, #656]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	4ba3      	ldr	r3, [pc, #652]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800124a:	2104      	movs	r1, #4
 800124c:	438a      	bics	r2, r1
 800124e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d014      	beq.n	8001282 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fba4 	bl	80009a4 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	e009      	b.n	8001276 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fb9f 	bl	80009a4 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a9b      	ldr	r2, [pc, #620]	@ (80014dc <HAL_RCC_OscConfig+0x624>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e12b      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	4b98      	ldr	r3, [pc, #608]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x3aa>
 8001280:	e013      	b.n	80012aa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fb8f 	bl	80009a4 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	e009      	b.n	80012a0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fb8a 	bl	80009a4 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a91      	ldr	r2, [pc, #580]	@ (80014dc <HAL_RCC_OscConfig+0x624>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e116      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	4b8d      	ldr	r3, [pc, #564]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	2202      	movs	r2, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012aa:	231f      	movs	r3, #31
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	4b87      	ldr	r3, [pc, #540]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012ba:	4989      	ldr	r1, [pc, #548]	@ (80014e0 <HAL_RCC_OscConfig+0x628>)
 80012bc:	400a      	ands	r2, r1
 80012be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2210      	movs	r2, #16
 80012c6:	4013      	ands	r3, r2
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d12a      	bne.n	8001328 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d6:	4b80      	ldr	r3, [pc, #512]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012d8:	2104      	movs	r1, #4
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012de:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e2:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb5b 	bl	80009a4 <HAL_GetTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012f4:	f7ff fb56 	bl	80009a4 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0e3      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001306:	4b74      	ldr	r3, [pc, #464]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130a:	2202      	movs	r2, #2
 800130c:	4013      	ands	r3, r2
 800130e:	d0f1      	beq.n	80012f4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001310:	4b71      	ldr	r3, [pc, #452]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001314:	22f8      	movs	r2, #248	@ 0xf8
 8001316:	4393      	bics	r3, r2
 8001318:	0019      	movs	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	00da      	lsls	r2, r3, #3
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001322:	430a      	orrs	r2, r1
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34
 8001326:	e034      	b.n	8001392 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	3305      	adds	r3, #5
 800132e:	d111      	bne.n	8001354 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001330:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001334:	4b68      	ldr	r3, [pc, #416]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001336:	2104      	movs	r1, #4
 8001338:	438a      	bics	r2, r1
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800133c:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800133e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001340:	22f8      	movs	r2, #248	@ 0xf8
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	00da      	lsls	r2, r3, #3
 800134c:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800134e:	430a      	orrs	r2, r1
 8001350:	635a      	str	r2, [r3, #52]	@ 0x34
 8001352:	e01e      	b.n	8001392 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001358:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800135a:	2104      	movs	r1, #4
 800135c:	430a      	orrs	r2, r1
 800135e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001360:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001364:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fb1a 	bl	80009a4 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001376:	f7ff fb15 	bl	80009a4 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0a2      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800138a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d1f1      	bne.n	8001376 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <HAL_RCC_OscConfig+0x4e4>
 800139a:	e097      	b.n	80014cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	220c      	movs	r2, #12
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x4f2>
 80013a8:	e06b      	b.n	8001482 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d14c      	bne.n	800144c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013b8:	494a      	ldr	r1, [pc, #296]	@ (80014e4 <HAL_RCC_OscConfig+0x62c>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff faf1 	bl	80009a4 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff faec 	bl	80009a4 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e079      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	049b      	lsls	r3, r3, #18
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ea:	220f      	movs	r2, #15
 80013ec:	4393      	bics	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f4:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013f6:	430a      	orrs	r2, r1
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a3a      	ldr	r2, [pc, #232]	@ (80014e8 <HAL_RCC_OscConfig+0x630>)
 8001400:	4013      	ands	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	431a      	orrs	r2, r3
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	0449      	lsls	r1, r1, #17
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fabf 	bl	80009a4 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff faba 	bl	80009a4 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e047      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	049b      	lsls	r3, r3, #18
 8001446:	4013      	ands	r3, r2
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x574>
 800144a:	e03f      	b.n	80014cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001452:	4924      	ldr	r1, [pc, #144]	@ (80014e4 <HAL_RCC_OscConfig+0x62c>)
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff faa4 	bl	80009a4 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fa9f 	bl	80009a4 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e02c      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	049b      	lsls	r3, r3, #18
 800147c:	4013      	ands	r3, r2
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x5aa>
 8001480:	e024      	b.n	80014cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e01f      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_RCC_OscConfig+0x620>)
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	025b      	lsls	r3, r3, #9
 80014a0:	401a      	ands	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d10e      	bne.n	80014c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	220f      	movs	r2, #15
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	23f0      	movs	r3, #240	@ 0xf0
 80014bc:	039b      	lsls	r3, r3, #14
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b008      	add	sp, #32
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000
 80014dc:	00001388 	.word	0x00001388
 80014e0:	efffffff 	.word	0xefffffff
 80014e4:	feffffff 	.word	0xfeffffff
 80014e8:	ffc2ffff 	.word	0xffc2ffff

080014ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0b3      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d911      	bls.n	8001532 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b58      	ldr	r3, [pc, #352]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	4393      	bics	r3, r2
 8001516:	0019      	movs	r1, r3
 8001518:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001520:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e09a      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d015      	beq.n	8001568 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2204      	movs	r2, #4
 8001542:	4013      	ands	r3, r2
 8001544:	d006      	beq.n	8001554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001546:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 800154c:	21e0      	movs	r1, #224	@ 0xe0
 800154e:	00c9      	lsls	r1, r1, #3
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	22f0      	movs	r2, #240	@ 0xf0
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	d040      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b3e      	ldr	r3, [pc, #248]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d114      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06e      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	049b      	lsls	r3, r3, #18
 800159a:	4013      	ands	r3, r2
 800159c:	d108      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e062      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e05b      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b0:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff f9ee 	bl	80009a4 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ce:	f7ff f9e9 	bl	80009a4 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <HAL_RCC_ClockConfig+0x18c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e042      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	220c      	movs	r2, #12
 80015e8:	401a      	ands	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1ec      	bne.n	80015ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d211      	bcs.n	8001626 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_RCC_ClockConfig+0x184>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e020      	b.n	8001668 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2204      	movs	r2, #4
 800162c:	4013      	ands	r3, r2
 800162e:	d009      	beq.n	8001644 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_RCC_ClockConfig+0x190>)
 8001636:	4013      	ands	r3, r2
 8001638:	0019      	movs	r1, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001644:	f000 f820 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001648:	0001      	movs	r1, r0
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_RCC_ClockConfig+0x188>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	220f      	movs	r2, #15
 8001652:	4013      	ands	r3, r2
 8001654:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_RCC_ClockConfig+0x194>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	000a      	movs	r2, r1
 800165a:	40da      	lsrs	r2, r3
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_RCC_ClockConfig+0x198>)
 800165e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001660:	2003      	movs	r0, #3
 8001662:	f7ff f959 	bl	8000918 <HAL_InitTick>
  
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40022000 	.word	0x40022000
 8001674:	40021000 	.word	0x40021000
 8001678:	00001388 	.word	0x00001388
 800167c:	fffff8ff 	.word	0xfffff8ff
 8001680:	080025e4 	.word	0x080025e4
 8001684:	20000008 	.word	0x20000008

08001688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	220c      	movs	r2, #12
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x30>
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d003      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x36>
 80016b6:	e02c      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ba:	613b      	str	r3, [r7, #16]
      break;
 80016bc:	e02c      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	220f      	movs	r2, #15
 80016c4:	4013      	ands	r3, r2
 80016c6:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	220f      	movs	r2, #15
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_RCC_GetSysClockFreq+0xa8>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	4013      	ands	r3, r2
 80016e2:	d009      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	4810      	ldr	r0, [pc, #64]	@ (8001728 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016e8:	f7fe fd0e 	bl	8000108 <__udivsi3>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4353      	muls	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	000a      	movs	r2, r1
 80016fc:	0152      	lsls	r2, r2, #5
 80016fe:	1a52      	subs	r2, r2, r1
 8001700:	0193      	lsls	r3, r2, #6
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	185b      	adds	r3, r3, r1
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
      break;
 8001710:	e002      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001714:	613b      	str	r3, [r7, #16]
      break;
 8001716:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001718:	693b      	ldr	r3, [r7, #16]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b006      	add	sp, #24
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	40021000 	.word	0x40021000
 8001728:	007a1200 	.word	0x007a1200
 800172c:	080025f4 	.word	0x080025f4
 8001730:	08002604 	.word	0x08002604

08001734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0a8      	b.n	8001898 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	2382      	movs	r3, #130	@ 0x82
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	429a      	cmp	r2, r3
 8001758:	d009      	beq.n	800176e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
 8001760:	e005      	b.n	800176e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	225d      	movs	r2, #93	@ 0x5d
 8001778:	5c9b      	ldrb	r3, [r3, r2]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	225c      	movs	r2, #92	@ 0x5c
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff f81a 	bl	80007c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	225d      	movs	r2, #93	@ 0x5d
 8001794:	2102      	movs	r1, #2
 8001796:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2140      	movs	r1, #64	@ 0x40
 80017a4:	438a      	bics	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	23e0      	movs	r3, #224	@ 0xe0
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d902      	bls.n	80017ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e002      	b.n	80017c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	23f0      	movs	r3, #240	@ 0xf0
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d008      	beq.n	80017de <HAL_SPI_Init+0xaa>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	23e0      	movs	r3, #224	@ 0xe0
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d002      	beq.n	80017de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2382      	movs	r3, #130	@ 0x82
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	2384      	movs	r3, #132	@ 0x84
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	400b      	ands	r3, r1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2102      	movs	r1, #2
 80017fa:	400b      	ands	r3, r1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2101      	movs	r1, #1
 8001804:	400b      	ands	r3, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6999      	ldr	r1, [r3, #24]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	400b      	ands	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2138      	movs	r1, #56	@ 0x38
 800181a:	400b      	ands	r3, r1
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	400b      	ands	r3, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	0011      	movs	r1, r2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	2204      	movs	r2, #4
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	2110      	movs	r1, #16
 800184c:	400b      	ands	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001854:	2108      	movs	r1, #8
 8001856:	400b      	ands	r3, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	23f0      	movs	r3, #240	@ 0xf0
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	400b      	ands	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	0011      	movs	r1, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <HAL_SPI_Init+0x16c>)
 8001884:	400a      	ands	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	225d      	movs	r2, #93	@ 0x5d
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	fffff7ff 	.word	0xfffff7ff

080018a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018b4:	231f      	movs	r3, #31
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	225c      	movs	r2, #92	@ 0x5c
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_SPI_Transmit+0x26>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e147      	b.n	8001b5a <HAL_SPI_Transmit+0x2b6>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	225c      	movs	r2, #92	@ 0x5c
 80018ce:	2101      	movs	r1, #1
 80018d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018d2:	f7ff f867 	bl	80009a4 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80018da:	2316      	movs	r3, #22
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	1dba      	adds	r2, r7, #6
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	225d      	movs	r2, #93	@ 0x5d
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d004      	beq.n	80018fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80018f0:	231f      	movs	r3, #31
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2202      	movs	r2, #2
 80018f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80018f8:	e128      	b.n	8001b4c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_SPI_Transmit+0x64>
 8001900:	1dbb      	adds	r3, r7, #6
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001908:	231f      	movs	r3, #31
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001910:	e11c      	b.n	8001b4c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	225d      	movs	r2, #93	@ 0x5d
 8001916:	2103      	movs	r1, #3
 8001918:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1dba      	adds	r2, r7, #6
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1dba      	adds	r2, r7, #6
 8001932:	8812      	ldrh	r2, [r2, #0]
 8001934:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2244      	movs	r2, #68	@ 0x44
 8001940:	2100      	movs	r1, #0
 8001942:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2246      	movs	r2, #70	@ 0x46
 8001948:	2100      	movs	r1, #0
 800194a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	429a      	cmp	r2, r3
 8001962:	d110      	bne.n	8001986 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2140      	movs	r1, #64	@ 0x40
 8001970:	438a      	bics	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	01c9      	lsls	r1, r1, #7
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2240      	movs	r2, #64	@ 0x40
 800198e:	4013      	ands	r3, r2
 8001990:	2b40      	cmp	r3, #64	@ 0x40
 8001992:	d007      	beq.n	80019a4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2140      	movs	r1, #64	@ 0x40
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	23e0      	movs	r3, #224	@ 0xe0
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d952      	bls.n	8001a56 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_SPI_Transmit+0x11e>
 80019b8:	2316      	movs	r3, #22
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d143      	bne.n	8001a4a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d2:	1c9a      	adds	r2, r3, #2
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019e6:	e030      	b.n	8001a4a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d112      	bne.n	8001a1c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	1c9a      	adds	r2, r3, #2
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a1a:	e016      	b.n	8001a4a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a1c:	f7fe ffc2 	bl	80009a4 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d802      	bhi.n	8001a32 <HAL_SPI_Transmit+0x18e>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_SPI_Transmit+0x194>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d108      	bne.n	8001a4a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001a38:	231f      	movs	r3, #31
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	225d      	movs	r2, #93	@ 0x5d
 8001a44:	2101      	movs	r1, #1
 8001a46:	5499      	strb	r1, [r3, r2]
          goto error;
 8001a48:	e080      	b.n	8001b4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1c9      	bne.n	80019e8 <HAL_SPI_Transmit+0x144>
 8001a54:	e053      	b.n	8001afe <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_SPI_Transmit+0x1c4>
 8001a5e:	2316      	movs	r3, #22
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d145      	bne.n	8001af4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	330c      	adds	r3, #12
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001a8e:	e031      	b.n	8001af4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d113      	bne.n	8001ac6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	330c      	adds	r3, #12
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ac4:	e016      	b.n	8001af4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ac6:	f7fe ff6d 	bl	80009a4 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d802      	bhi.n	8001adc <HAL_SPI_Transmit+0x238>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	d102      	bne.n	8001ae2 <HAL_SPI_Transmit+0x23e>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	225d      	movs	r2, #93	@ 0x5d
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
          goto error;
 8001af2:	e02b      	b.n	8001b4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1c8      	bne.n	8001a90 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fcef 	bl	80024e8 <SPI_EndRxTxTransaction>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e003      	b.n	8001b4c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	225d      	movs	r2, #93	@ 0x5d
 8001b48:	2101      	movs	r1, #1
 8001b4a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	225c      	movs	r2, #92	@ 0x5c
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001b54:	231f      	movs	r3, #31
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b008      	add	sp, #32
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b74:	2117      	movs	r1, #23
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	225d      	movs	r2, #93	@ 0x5d
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d003      	beq.n	8001b90 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b8e:	e12b      	b.n	8001de8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2382      	movs	r3, #130	@ 0x82
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d113      	bne.n	8001bc4 <HAL_SPI_Receive+0x60>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	225d      	movs	r2, #93	@ 0x5d
 8001ba8:	2104      	movs	r1, #4
 8001baa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	881c      	ldrh	r4, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	0023      	movs	r3, r4
 8001bbc:	f000 f924 	bl	8001e08 <HAL_SPI_TransmitReceive>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	e118      	b.n	8001df6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	225c      	movs	r2, #92	@ 0x5c
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_SPI_Receive+0x6e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e111      	b.n	8001df6 <HAL_SPI_Receive+0x292>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	225c      	movs	r2, #92	@ 0x5c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bda:	f7fe fee3 	bl	80009a4 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_SPI_Receive+0x8c>
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001bf0:	2317      	movs	r3, #23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bf8:	e0f6      	b.n	8001de8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	225d      	movs	r2, #93	@ 0x5d
 8001bfe:	2104      	movs	r1, #4
 8001c00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1dba      	adds	r2, r7, #6
 8001c12:	2144      	movs	r1, #68	@ 0x44
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1dba      	adds	r2, r7, #6
 8001c1c:	2146      	movs	r1, #70	@ 0x46
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	23e0      	movs	r3, #224	@ 0xe0
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	496a      	ldr	r1, [pc, #424]	@ (8001e00 <HAL_SPI_Receive+0x29c>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	e008      	b.n	8001c70 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	0149      	lsls	r1, r1, #5
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d10f      	bne.n	8001c9c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2140      	movs	r1, #64	@ 0x40
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	495b      	ldr	r1, [pc, #364]	@ (8001e04 <HAL_SPI_Receive+0x2a0>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2240      	movs	r2, #64	@ 0x40
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b40      	cmp	r3, #64	@ 0x40
 8001ca8:	d007      	beq.n	8001cba <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2140      	movs	r1, #64	@ 0x40
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	23e0      	movs	r3, #224	@ 0xe0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d900      	bls.n	8001cc8 <HAL_SPI_Receive+0x164>
 8001cc6:	e071      	b.n	8001dac <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cc8:	e035      	b.n	8001d36 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d117      	bne.n	8001d08 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	001a      	movs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2246      	movs	r2, #70	@ 0x46
 8001cf8:	5a9b      	ldrh	r3, [r3, r2]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b299      	uxth	r1, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2246      	movs	r2, #70	@ 0x46
 8001d04:	5299      	strh	r1, [r3, r2]
 8001d06:	e016      	b.n	8001d36 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d08:	f7fe fe4c 	bl	80009a4 <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d802      	bhi.n	8001d1e <HAL_SPI_Receive+0x1ba>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <HAL_SPI_Receive+0x1c0>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d108      	bne.n	8001d36 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001d24:	2317      	movs	r3, #23
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2203      	movs	r2, #3
 8001d2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	225d      	movs	r2, #93	@ 0x5d
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]
          goto error;
 8001d34:	e058      	b.n	8001de8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2246      	movs	r2, #70	@ 0x46
 8001d3a:	5a9b      	ldrh	r3, [r3, r2]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1c3      	bne.n	8001cca <HAL_SPI_Receive+0x166>
 8001d42:	e039      	b.n	8001db8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d115      	bne.n	8001d7e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2246      	movs	r2, #70	@ 0x46
 8001d6e:	5a9b      	ldrh	r3, [r3, r2]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b299      	uxth	r1, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2246      	movs	r2, #70	@ 0x46
 8001d7a:	5299      	strh	r1, [r3, r2]
 8001d7c:	e016      	b.n	8001dac <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7e:	f7fe fe11 	bl	80009a4 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d802      	bhi.n	8001d94 <HAL_SPI_Receive+0x230>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	d102      	bne.n	8001d9a <HAL_SPI_Receive+0x236>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001d9a:	2317      	movs	r3, #23
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2203      	movs	r2, #3
 8001da0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	225d      	movs	r2, #93	@ 0x5d
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001daa:	e01d      	b.n	8001de8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2246      	movs	r2, #70	@ 0x46
 8001db0:	5a9b      	ldrh	r3, [r3, r2]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1c5      	bne.n	8001d44 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fb34 	bl	800242c <SPI_EndRxTransaction>
 8001dc4:	1e03      	subs	r3, r0, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001dd6:	2317      	movs	r3, #23
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e003      	b.n	8001de8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	225d      	movs	r2, #93	@ 0x5d
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	225c      	movs	r2, #92	@ 0x5c
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001df0:	2317      	movs	r3, #23
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b007      	add	sp, #28
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	ffffefff 	.word	0xffffefff
 8001e04:	ffffbfff 	.word	0xffffbfff

08001e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	001a      	movs	r2, r3
 8001e16:	1cbb      	adds	r3, r7, #2
 8001e18:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e1e:	2323      	movs	r3, #35	@ 0x23
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	225c      	movs	r2, #92	@ 0x5c
 8001e2a:	5c9b      	ldrb	r3, [r3, r2]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_SPI_TransmitReceive+0x2c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e1c4      	b.n	80021be <HAL_SPI_TransmitReceive+0x3b6>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	225c      	movs	r2, #92	@ 0x5c
 8001e38:	2101      	movs	r1, #1
 8001e3a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e3c:	f7fe fdb2 	bl	80009a4 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e44:	201b      	movs	r0, #27
 8001e46:	183b      	adds	r3, r7, r0
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	215d      	movs	r1, #93	@ 0x5d
 8001e4c:	5c52      	ldrb	r2, [r2, r1]
 8001e4e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001e56:	2312      	movs	r3, #18
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	1cba      	adds	r2, r7, #2
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d011      	beq.n	8001e8c <HAL_SPI_TransmitReceive+0x84>
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	2382      	movs	r3, #130	@ 0x82
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d107      	bne.n	8001e82 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <HAL_SPI_TransmitReceive+0x7a>
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d004      	beq.n	8001e8c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001e82:	2323      	movs	r3, #35	@ 0x23
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e8a:	e191      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x98>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x98>
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001ea0:	2323      	movs	r3, #35	@ 0x23
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ea8:	e182      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	225d      	movs	r2, #93	@ 0x5d
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d003      	beq.n	8001ebe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	225d      	movs	r2, #93	@ 0x5d
 8001eba:	2105      	movs	r1, #5
 8001ebc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1cba      	adds	r2, r7, #2
 8001ece:	2146      	movs	r1, #70	@ 0x46
 8001ed0:	8812      	ldrh	r2, [r2, #0]
 8001ed2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1cba      	adds	r2, r7, #2
 8001ed8:	2144      	movs	r1, #68	@ 0x44
 8001eda:	8812      	ldrh	r2, [r2, #0]
 8001edc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1cba      	adds	r2, r7, #2
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1cba      	adds	r2, r7, #2
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	23e0      	movs	r3, #224	@ 0xe0
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d908      	bls.n	8001f1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	49ac      	ldr	r1, [pc, #688]	@ (80021c8 <HAL_SPI_TransmitReceive+0x3c0>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e008      	b.n	8001f30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0149      	lsls	r1, r1, #5
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2240      	movs	r2, #64	@ 0x40
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b40      	cmp	r3, #64	@ 0x40
 8001f3c:	d007      	beq.n	8001f4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2140      	movs	r1, #64	@ 0x40
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	23e0      	movs	r3, #224	@ 0xe0
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d800      	bhi.n	8001f5c <HAL_SPI_TransmitReceive+0x154>
 8001f5a:	e083      	b.n	8002064 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x168>
 8001f64:	2312      	movs	r3, #18
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d000      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x168>
 8001f6e:	e06d      	b.n	800204c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f80:	1c9a      	adds	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f94:	e05a      	b.n	800204c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d11b      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x1d4>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x1d4>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d113      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11c      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x21c>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2246      	movs	r2, #70	@ 0x46
 8001fee:	5a9b      	ldrh	r3, [r3, r2]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	b292      	uxth	r2, r2
 8002002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	1c9a      	adds	r2, r3, #2
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2246      	movs	r2, #70	@ 0x46
 8002012:	5a9b      	ldrh	r3, [r3, r2]
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b299      	uxth	r1, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2246      	movs	r2, #70	@ 0x46
 800201e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002020:	2301      	movs	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002024:	f7fe fcbe 	bl	80009a4 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002030:	429a      	cmp	r2, r3
 8002032:	d80b      	bhi.n	800204c <HAL_SPI_TransmitReceive+0x244>
 8002034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002036:	3301      	adds	r3, #1
 8002038:	d008      	beq.n	800204c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800203a:	2323      	movs	r3, #35	@ 0x23
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2203      	movs	r2, #3
 8002040:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	225d      	movs	r2, #93	@ 0x5d
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]
        goto error;
 800204a:	e0b1      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d19f      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x18e>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2246      	movs	r2, #70	@ 0x46
 800205a:	5a9b      	ldrh	r3, [r3, r2]
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d199      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x18e>
 8002062:	e089      	b.n	8002178 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_SPI_TransmitReceive+0x270>
 800206c:	2312      	movs	r3, #18
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d000      	beq.n	8002078 <HAL_SPI_TransmitReceive+0x270>
 8002076:	e074      	b.n	8002162 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209e:	e060      	b.n	8002162 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d11c      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x2e0>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x2e0>
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d114      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11e      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x32c>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2246      	movs	r2, #70	@ 0x46
 80020fa:	5a9b      	ldrh	r3, [r3, r2]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d018      	beq.n	8002134 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	001a      	movs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2246      	movs	r2, #70	@ 0x46
 8002122:	5a9b      	ldrh	r3, [r3, r2]
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b299      	uxth	r1, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2246      	movs	r2, #70	@ 0x46
 800212e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002134:	f7fe fc36 	bl	80009a4 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002140:	429a      	cmp	r2, r3
 8002142:	d802      	bhi.n	800214a <HAL_SPI_TransmitReceive+0x342>
 8002144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002146:	3301      	adds	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_SPI_TransmitReceive+0x348>
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002150:	2323      	movs	r3, #35	@ 0x23
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2203      	movs	r2, #3
 8002156:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	225d      	movs	r2, #93	@ 0x5d
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002160:	e026      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d199      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x298>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2246      	movs	r2, #70	@ 0x46
 8002170:	5a9b      	ldrh	r3, [r3, r2]
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d193      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f9b2 	bl	80024e8 <SPI_EndRxTxTransaction>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d006      	beq.n	8002196 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002188:	2323      	movs	r3, #35	@ 0x23
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800219e:	2323      	movs	r3, #35	@ 0x23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e003      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	225d      	movs	r2, #93	@ 0x5d
 80021ac:	2101      	movs	r1, #1
 80021ae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	225c      	movs	r2, #92	@ 0x5c
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021b8:	2323      	movs	r3, #35	@ 0x23
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b00a      	add	sp, #40	@ 0x28
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	ffffefff 	.word	0xffffefff

080021cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021dc:	f7fe fbe2 	bl	80009a4 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	18d3      	adds	r3, r2, r3
 80021ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021ec:	f7fe fbda 	bl	80009a4 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021f4:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	0d1b      	lsrs	r3, r3, #20
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	4353      	muls	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002202:	e058      	b.n	80022b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	d055      	beq.n	80022b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800220a:	f7fe fbcb 	bl	80009a4 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	429a      	cmp	r2, r3
 8002218:	d902      	bls.n	8002220 <SPI_WaitFlagStateUntilTimeout+0x54>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d142      	bne.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	21e0      	movs	r1, #224	@ 0xe0
 800222c:	438a      	bics	r2, r1
 800222e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	2382      	movs	r3, #130	@ 0x82
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	429a      	cmp	r2, r3
 800223a:	d113      	bne.n	8002264 <SPI_WaitFlagStateUntilTimeout+0x98>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	429a      	cmp	r2, r3
 8002246:	d005      	beq.n	8002254 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2140      	movs	r1, #64	@ 0x40
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	429a      	cmp	r2, r3
 800226e:	d110      	bne.n	8002292 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	491a      	ldr	r1, [pc, #104]	@ (80022e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2180      	movs	r1, #128	@ 0x80
 800228c:	0189      	lsls	r1, r1, #6
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	225d      	movs	r2, #93	@ 0x5d
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	225c      	movs	r2, #92	@ 0x5c
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e017      	b.n	80022d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	425a      	negs	r2, r3
 80022c6:	4153      	adcs	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	001a      	movs	r2, r3
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d197      	bne.n	8002204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b008      	add	sp, #32
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000008 	.word	0x20000008
 80022e4:	ffffdfff 	.word	0xffffdfff

080022e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80022f6:	2317      	movs	r3, #23
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80022fe:	f7fe fb51 	bl	80009a4 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	18d3      	adds	r3, r2, r3
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800230e:	f7fe fb49 	bl	80009a4 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	0013      	movs	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	189b      	adds	r3, r3, r2
 8002328:	00da      	lsls	r2, r3, #3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	0d1b      	lsrs	r3, r3, #20
 800232e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002330:	4353      	muls	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002334:	e068      	b.n	8002408 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	23c0      	movs	r3, #192	@ 0xc0
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	429a      	cmp	r2, r3
 800233e:	d10a      	bne.n	8002356 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	2117      	movs	r1, #23
 800234e:	187b      	adds	r3, r7, r1
 8002350:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002352:	187b      	adds	r3, r7, r1
 8002354:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	d055      	beq.n	8002408 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800235c:	f7fe fb22 	bl	80009a4 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	429a      	cmp	r2, r3
 800236a:	d902      	bls.n	8002372 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d142      	bne.n	80023f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	21e0      	movs	r1, #224	@ 0xe0
 800237e:	438a      	bics	r2, r1
 8002380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	2382      	movs	r3, #130	@ 0x82
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	429a      	cmp	r2, r3
 800238c:	d113      	bne.n	80023b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	429a      	cmp	r2, r3
 8002398:	d005      	beq.n	80023a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d107      	bne.n	80023b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2140      	movs	r1, #64	@ 0x40
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	429a      	cmp	r2, r3
 80023c0:	d110      	bne.n	80023e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4916      	ldr	r1, [pc, #88]	@ (8002428 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	0189      	lsls	r1, r1, #6
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	225d      	movs	r2, #93	@ 0x5d
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	225c      	movs	r2, #92	@ 0x5c
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e010      	b.n	800241a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3b01      	subs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d18e      	bne.n	8002336 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b00a      	add	sp, #40	@ 0x28
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	20000008 	.word	0x20000008
 8002428:	ffffdfff 	.word	0xffffdfff

0800242c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	2382      	movs	r3, #130	@ 0x82
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	429a      	cmp	r2, r3
 8002442:	d113      	bne.n	800246c <SPI_EndRxTransaction+0x40>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2140      	movs	r1, #64	@ 0x40
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	0013      	movs	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	f7ff fea7 	bl	80021cc <SPI_WaitFlagStateUntilTimeout>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d007      	beq.n	8002492 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	2220      	movs	r2, #32
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e026      	b.n	80024e0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	2382      	movs	r3, #130	@ 0x82
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	429a      	cmp	r2, r3
 800249c:	d11f      	bne.n	80024de <SPI_EndRxTransaction+0xb2>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d005      	beq.n	80024b6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d113      	bne.n	80024de <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	23c0      	movs	r3, #192	@ 0xc0
 80024ba:	00d9      	lsls	r1, r3, #3
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	0013      	movs	r3, r2
 80024c4:	2200      	movs	r2, #0
 80024c6:	f7ff ff0f 	bl	80022e8 <SPI_WaitFifoStateUntilTimeout>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d007      	beq.n	80024de <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	2220      	movs	r2, #32
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e000      	b.n	80024e0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	23c0      	movs	r3, #192	@ 0xc0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	0013      	movs	r3, r2
 8002502:	2200      	movs	r2, #0
 8002504:	f7ff fef0 	bl	80022e8 <SPI_WaitFifoStateUntilTimeout>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d007      	beq.n	800251c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002510:	2220      	movs	r2, #32
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e027      	b.n	800256c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	0013      	movs	r3, r2
 8002526:	2200      	movs	r2, #0
 8002528:	2180      	movs	r1, #128	@ 0x80
 800252a:	f7ff fe4f 	bl	80021cc <SPI_WaitFlagStateUntilTimeout>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d007      	beq.n	8002542 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002536:	2220      	movs	r2, #32
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e014      	b.n	800256c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	23c0      	movs	r3, #192	@ 0xc0
 8002546:	00d9      	lsls	r1, r3, #3
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	0013      	movs	r3, r2
 8002550:	2200      	movs	r2, #0
 8002552:	f7ff fec9 	bl	80022e8 <SPI_WaitFifoStateUntilTimeout>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d007      	beq.n	800256a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	2220      	movs	r2, #32
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e000      	b.n	800256c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}

08002574 <memset>:
 8002574:	0003      	movs	r3, r0
 8002576:	1882      	adds	r2, r0, r2
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	7019      	strb	r1, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	2600      	movs	r6, #0
 8002588:	4c0c      	ldr	r4, [pc, #48]	@ (80025bc <__libc_init_array+0x38>)
 800258a:	4d0d      	ldr	r5, [pc, #52]	@ (80025c0 <__libc_init_array+0x3c>)
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	42a6      	cmp	r6, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	2600      	movs	r6, #0
 8002596:	f000 f819 	bl	80025cc <_init>
 800259a:	4c0a      	ldr	r4, [pc, #40]	@ (80025c4 <__libc_init_array+0x40>)
 800259c:	4d0a      	ldr	r5, [pc, #40]	@ (80025c8 <__libc_init_array+0x44>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	42a6      	cmp	r6, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	00b3      	lsls	r3, r6, #2
 80025aa:	58eb      	ldr	r3, [r5, r3]
 80025ac:	4798      	blx	r3
 80025ae:	3601      	adds	r6, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	00b3      	lsls	r3, r6, #2
 80025b4:	58eb      	ldr	r3, [r5, r3]
 80025b6:	4798      	blx	r3
 80025b8:	3601      	adds	r6, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08002614 	.word	0x08002614
 80025c0:	08002614 	.word	0x08002614
 80025c4:	08002618 	.word	0x08002618
 80025c8:	08002614 	.word	0x08002614

080025cc <_init>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr

080025d8 <_fini>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr
