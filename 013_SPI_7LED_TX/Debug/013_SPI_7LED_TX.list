
013_SPI_7LED_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002570  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002630  08002630  00003630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002660  08002660  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002660  08002660  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002660  08002660  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002660  08002660  00003660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002664  08002664  00003664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002668  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000014  0800267c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800267c  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005137  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001383  00000000  00000000  00009173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000455  00000000  00000000  0000aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f124  00000000  00000000  0000af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007626  00000000  00000000  0001a049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a22a  00000000  00000000  0002166f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007b899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001358  00000000  00000000  0007b8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0007cc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002618 	.word	0x08002618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002618 	.word	0x08002618

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb6c 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f876 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8f2 	bl	8000414 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f8b2 	bl	8000398 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	 nrf24_config(40, 7); // 2.4 GHz bandında 40. kanalda, 32 byte payload
 8000234:	2107      	movs	r1, #7
 8000236:	2028      	movs	r0, #40	@ 0x28
 8000238:	f000 f978 	bl	800052c <nrf24_config>
     nrf24_tx_address(tx_address);
 800023c:	4b33      	ldr	r3, [pc, #204]	@ (800030c <main+0xec>)
 800023e:	0018      	movs	r0, r3
 8000240:	f000 f9a1 	bl	8000586 <nrf24_tx_address>
     nrf24_tx_mode();
 8000244:	f000 f9b3 	bl	80005ae <nrf24_tx_mode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tx_data[0] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000248:	2390      	movs	r3, #144	@ 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2101      	movs	r1, #1
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fe02 	bl	8000e58 <HAL_GPIO_ReadPin>
 8000254:	0003      	movs	r3, r0
 8000256:	425a      	negs	r2, r3
 8000258:	4153      	adcs	r3, r2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	001a      	movs	r2, r3
 800025e:	4b2c      	ldr	r3, [pc, #176]	@ (8000310 <main+0xf0>)
 8000260:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000262:	2390      	movs	r3, #144	@ 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2102      	movs	r1, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fdf5 	bl	8000e58 <HAL_GPIO_ReadPin>
 800026e:	0003      	movs	r3, r0
 8000270:	425a      	negs	r2, r3
 8000272:	4153      	adcs	r3, r2
 8000274:	b2db      	uxtb	r3, r3
 8000276:	001a      	movs	r2, r3
 8000278:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <main+0xf0>)
 800027a:	705a      	strb	r2, [r3, #1]
	  tx_data[2] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 800027c:	2380      	movs	r3, #128	@ 0x80
 800027e:	015a      	lsls	r2, r3, #5
 8000280:	2390      	movs	r3, #144	@ 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	0011      	movs	r1, r2
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fde6 	bl	8000e58 <HAL_GPIO_ReadPin>
 800028c:	0003      	movs	r3, r0
 800028e:	425a      	negs	r2, r3
 8000290:	4153      	adcs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	001a      	movs	r2, r3
 8000296:	4b1e      	ldr	r3, [pc, #120]	@ (8000310 <main+0xf0>)
 8000298:	709a      	strb	r2, [r3, #2]
	  tx_data[3] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800029a:	2390      	movs	r3, #144	@ 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2110      	movs	r1, #16
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fdd9 	bl	8000e58 <HAL_GPIO_ReadPin>
 80002a6:	0003      	movs	r3, r0
 80002a8:	425a      	negs	r2, r3
 80002aa:	4153      	adcs	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	001a      	movs	r2, r3
 80002b0:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <main+0xf0>)
 80002b2:	70da      	strb	r2, [r3, #3]
	  tx_data[4] = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80002b4:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <main+0xf4>)
 80002b6:	2101      	movs	r1, #1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fdcd 	bl	8000e58 <HAL_GPIO_ReadPin>
 80002be:	0003      	movs	r3, r0
 80002c0:	425a      	negs	r2, r3
 80002c2:	4153      	adcs	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	001a      	movs	r2, r3
 80002c8:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <main+0xf0>)
 80002ca:	711a      	strb	r2, [r3, #4]
	  tx_data[5] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80002cc:	2380      	movs	r3, #128	@ 0x80
 80002ce:	021a      	lsls	r2, r3, #8
 80002d0:	2390      	movs	r3, #144	@ 0x90
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fdbe 	bl	8000e58 <HAL_GPIO_ReadPin>
 80002dc:	0003      	movs	r3, r0
 80002de:	425a      	negs	r2, r3
 80002e0:	4153      	adcs	r3, r2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	001a      	movs	r2, r3
 80002e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <main+0xf0>)
 80002e8:	715a      	strb	r2, [r3, #5]

	             if (nrf24_send((uint8_t*)tx_data, 7))
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <main+0xf0>)
 80002ec:	2107      	movs	r1, #7
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 f96c 	bl	80005cc <nrf24_send>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d005      	beq.n	8000304 <main+0xe4>
	             {
	               HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002f8:	2390      	movs	r3, #144	@ 0x90
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	2120      	movs	r1, #32
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fde4 	bl	8000ecc <HAL_GPIO_TogglePin>
	             }
	             HAL_Delay(200); // 1 saiye bekle
 8000304:	20c8      	movs	r0, #200	@ 0xc8
 8000306:	f000 fb5f 	bl	80009c8 <HAL_Delay>
	  tx_data[0] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800030a:	e79d      	b.n	8000248 <main+0x28>
 800030c:	20000000 	.word	0x20000000
 8000310:	20000094 	.word	0x20000094
 8000314:	48000400 	.word	0x48000400

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b091      	sub	sp, #68	@ 0x44
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	2410      	movs	r4, #16
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	2330      	movs	r3, #48	@ 0x30
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f002 f949 	bl	80025c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	2310      	movs	r3, #16
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f002 f942 	bl	80025c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033c:	0021      	movs	r1, r4
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2202      	movs	r2, #2
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2210      	movs	r2, #16
 800034e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	187b      	adds	r3, r7, r1
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fdd3 	bl	8000f04 <HAL_RCC_OscConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000362:	f000 f8dd 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	003b      	movs	r3, r7
 8000368:	2207      	movs	r2, #7
 800036a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800036c:	003b      	movs	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	003b      	movs	r3, r7
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037e:	003b      	movs	r3, r7
 8000380:	2100      	movs	r1, #0
 8000382:	0018      	movs	r0, r3
 8000384:	f001 f8d8 	bl	8001538 <HAL_RCC_ClockConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800038c:	f000 f8c8 	bl	8000520 <Error_Handler>
  }
}
 8000390:	46c0      	nop			@ (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b011      	add	sp, #68	@ 0x44
 8000396:	bd90      	pop	{r4, r7, pc}

08000398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <MX_SPI1_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <MX_SPI1_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_SPI1_Init+0x74>)
 80003a4:	2282      	movs	r2, #130	@ 0x82
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003aa:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_SPI1_Init+0x74>)
 80003b2:	22e0      	movs	r2, #224	@ 0xe0
 80003b4:	00d2      	lsls	r2, r2, #3
 80003b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_SPI1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_SPI1_Init+0x74>)
 80003c6:	2280      	movs	r2, #128	@ 0x80
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_SPI1_Init+0x74>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <MX_SPI1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <MX_SPI1_Init+0x74>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_SPI1_Init+0x74>)
 80003f2:	2208      	movs	r2, #8
 80003f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <MX_SPI1_Init+0x74>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f9c1 	bl	8001780 <HAL_SPI_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000402:	f000 f88d 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	40013000 	.word	0x40013000

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b089      	sub	sp, #36	@ 0x24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	240c      	movs	r4, #12
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 f8cb 	bl	80025c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b3a      	ldr	r3, [pc, #232]	@ (8000514 <MX_GPIO_Init+0x100>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b36      	ldr	r3, [pc, #216]	@ (8000514 <MX_GPIO_Init+0x100>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <MX_GPIO_Init+0x100>)
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	02c9      	lsls	r1, r1, #11
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b2f      	ldr	r3, [pc, #188]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	02db      	lsls	r3, r3, #11
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000462:	2390      	movs	r3, #144	@ 0x90
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fd11 	bl	8000e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8000470:	23c0      	movs	r3, #192	@ 0xc0
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	4828      	ldr	r0, [pc, #160]	@ (8000518 <MX_GPIO_Init+0x104>)
 8000476:	2200      	movs	r2, #0
 8000478:	0019      	movs	r1, r3
 800047a:	f000 fd0a 	bl	8000e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_12
 800047e:	193b      	adds	r3, r7, r4
 8000480:	4a26      	ldr	r2, [pc, #152]	@ (800051c <MX_GPIO_Init+0x108>)
 8000482:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2201      	movs	r2, #1
 800048e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	193a      	adds	r2, r7, r4
 8000492:	2390      	movs	r3, #144	@ 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fb6d 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2220      	movs	r2, #32
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2201      	movs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	193a      	adds	r2, r7, r4
 80004b8:	2390      	movs	r3, #144	@ 0x90
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fb5a 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2201      	movs	r2, #1
 80004d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000518 <MX_GPIO_Init+0x104>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f000 fb4b 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80004e2:	0021      	movs	r1, r4
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	22c0      	movs	r2, #192	@ 0xc0
 80004e8:	00d2      	lsls	r2, r2, #3
 80004ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2203      	movs	r2, #3
 80004fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <MX_GPIO_Init+0x104>)
 8000502:	0019      	movs	r1, r3
 8000504:	0010      	movs	r0, r2
 8000506:	f000 fb37 	bl	8000b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b009      	add	sp, #36	@ 0x24
 8000510:	bd90      	pop	{r4, r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400
 800051c:	00009013 	.word	0x00009013

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <nrf24_config>:
    HAL_Delay(5);
}

// **RF Modülü Konfigürasyonu**
void nrf24_config(uint8_t channel, uint8_t payloadSize)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
    nrf24_writeRegister(0x05, channel);  // RF Kanalı
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	0019      	movs	r1, r3
 8000544:	2005      	movs	r0, #5
 8000546:	f000 f87b 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x11, payloadSize);  // RX Payload boyutu
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	0019      	movs	r1, r3
 8000550:	2011      	movs	r0, #17
 8000552:	f000 f875 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x01, 0x01);  // Auto ACK Açık
 8000556:	2101      	movs	r1, #1
 8000558:	2001      	movs	r0, #1
 800055a:	f000 f871 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x02, 0x01);  // Data Pipe 0 Aktif
 800055e:	2101      	movs	r1, #1
 8000560:	2002      	movs	r0, #2
 8000562:	f000 f86d 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x03, 0x03);  // Adres genişliği 5 bayt
 8000566:	2103      	movs	r1, #3
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f869 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x06, 0x07);  // Data rate: 1Mbps, Güç: 0dBm
 800056e:	2107      	movs	r1, #7
 8000570:	2006      	movs	r0, #6
 8000572:	f000 f865 	bl	8000640 <nrf24_writeRegister>
    nrf24_writeRegister(0x00, 0x0E);  // CRC ve güç açık
 8000576:	210e      	movs	r1, #14
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f861 	bl	8000640 <nrf24_writeRegister>
}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}

08000586 <nrf24_tx_address>:

// **Verici Adresi Ayarla**
void nrf24_tx_address(uint8_t *address)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
    nrf24_writeRegisterMulti(0x10, address, 5);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2205      	movs	r2, #5
 8000592:	0019      	movs	r1, r3
 8000594:	2010      	movs	r0, #16
 8000596:	f000 f87b 	bl	8000690 <nrf24_writeRegisterMulti>
    nrf24_writeRegisterMulti(0x0A, address, 5);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2205      	movs	r2, #5
 800059e:	0019      	movs	r1, r3
 80005a0:	200a      	movs	r0, #10
 80005a2:	f000 f875 	bl	8000690 <nrf24_writeRegisterMulti>
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}

080005ae <nrf24_tx_mode>:
    nrf24_writeRegisterMulti(0x0A, address, 5);
}

// **Verici Moduna Geç**
void nrf24_tx_mode(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
    nrf24_writeRegister(0x00, 0x0E);
 80005b2:	210e      	movs	r1, #14
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f843 	bl	8000640 <nrf24_writeRegister>
    nrf24_ceHigh();
 80005ba:	f000 f8bd 	bl	8000738 <nrf24_ceHigh>
    HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fa02 	bl	80009c8 <HAL_Delay>
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <nrf24_send>:
    HAL_Delay(1);
}

// **Veri Gönder**
uint8_t nrf24_send(uint8_t *data, uint8_t length)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	000a      	movs	r2, r1
 80005d6:	1cfb      	adds	r3, r7, #3
 80005d8:	701a      	strb	r2, [r3, #0]
    uint8_t status;

    // SPI haberleşmesini başlat
    nrf24_csnLow();
 80005da:	f000 f8c9 	bl	8000770 <nrf24_csnLow>

    // TX FIFO'ya veri yazmak için komut gönder
    uint8_t command = NRF24_CMD_W_TX_PAYLOAD;
 80005de:	210e      	movs	r1, #14
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	22a0      	movs	r2, #160	@ 0xa0
 80005e4:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80005e6:	1879      	adds	r1, r7, r1
 80005e8:	4814      	ldr	r0, [pc, #80]	@ (800063c <nrf24_send+0x70>)
 80005ea:	2364      	movs	r3, #100	@ 0x64
 80005ec:	2201      	movs	r2, #1
 80005ee:	f001 f97f 	bl	80018f0 <HAL_SPI_Transmit>

    // Veriyi gönder (length kadar bayt gönderiyoruz)
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 80005f2:	1cfb      	adds	r3, r7, #3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4810      	ldr	r0, [pc, #64]	@ (800063c <nrf24_send+0x70>)
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	f001 f977 	bl	80018f0 <HAL_SPI_Transmit>

    // SPI haberleşmesini bitir
    nrf24_csnHigh();
 8000602:	f000 f8a7 	bl	8000754 <nrf24_csnHigh>

    // Kısa bir gecikme
    HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f000 f9de 	bl	80009c8 <HAL_Delay>

    // Durum registerini oku
    nrf24_readRegisterMulti(0x07, &status, 1);
 800060c:	240f      	movs	r4, #15
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	0019      	movs	r1, r3
 8000614:	2007      	movs	r0, #7
 8000616:	f000 f867 	bl	80006e8 <nrf24_readRegisterMulti>

    // Eğer veri başarıyla gönderildiyse
    if (status & 0x20)
 800061a:	193b      	adds	r3, r7, r4
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	001a      	movs	r2, r3
 8000620:	2320      	movs	r3, #32
 8000622:	4013      	ands	r3, r2
 8000624:	d005      	beq.n	8000632 <nrf24_send+0x66>
    {
        nrf24_writeRegister(0x07, 0x20);  // TX flag temizle
 8000626:	2120      	movs	r1, #32
 8000628:	2007      	movs	r0, #7
 800062a:	f000 f809 	bl	8000640 <nrf24_writeRegister>
        return 1;  // Başarılı
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <nrf24_send+0x68>
    }

    return 0;  // Başarısız
 8000632:	2300      	movs	r3, #0
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	b005      	add	sp, #20
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	20000030 	.word	0x20000030

08000640 <nrf24_writeRegister>:
    nrf24_writeRegister(0x07, 0x40);
}

// **SPI Register Yaz**
static void nrf24_writeRegister(uint8_t reg, uint8_t value)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	1c0a      	adds	r2, r1, #0
 8000650:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 8000652:	f000 f88d 	bl	8000770 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2220      	movs	r2, #32
 800065c:	4313      	orrs	r3, r2
 800065e:	b2da      	uxtb	r2, r3
 8000660:	210f      	movs	r1, #15
 8000662:	187b      	adds	r3, r7, r1
 8000664:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 8000666:	1879      	adds	r1, r7, r1
 8000668:	4808      	ldr	r0, [pc, #32]	@ (800068c <nrf24_writeRegister+0x4c>)
 800066a:	2364      	movs	r3, #100	@ 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	f001 f93f 	bl	80018f0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, &value, 1, 100);
 8000672:	1db9      	adds	r1, r7, #6
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <nrf24_writeRegister+0x4c>)
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	2201      	movs	r2, #1
 800067a:	f001 f939 	bl	80018f0 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 800067e:	f000 f869 	bl	8000754 <nrf24_csnHigh>
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b004      	add	sp, #16
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	20000030 	.word	0x20000030

08000690 <nrf24_writeRegisterMulti>:

// **SPI Register Çoklu Yaz**
static void nrf24_writeRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6039      	str	r1, [r7, #0]
 8000698:	0011      	movs	r1, r2
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	1c02      	adds	r2, r0, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	1dbb      	adds	r3, r7, #6
 80006a2:	1c0a      	adds	r2, r1, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80006a6:	f000 f863 	bl	8000770 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_W_REGISTER | reg;
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2220      	movs	r2, #32
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	210f      	movs	r1, #15
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 80006ba:	1879      	adds	r1, r7, r1
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <nrf24_writeRegisterMulti+0x54>)
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	2201      	movs	r2, #1
 80006c2:	f001 f915 	bl	80018f0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&NRF_SPI, data, length, 100);
 80006c6:	1dbb      	adds	r3, r7, #6
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	6839      	ldr	r1, [r7, #0]
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <nrf24_writeRegisterMulti+0x54>)
 80006d0:	2364      	movs	r3, #100	@ 0x64
 80006d2:	f001 f90d 	bl	80018f0 <HAL_SPI_Transmit>
    nrf24_csnHigh();
 80006d6:	f000 f83d 	bl	8000754 <nrf24_csnHigh>
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b004      	add	sp, #16
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	20000030 	.word	0x20000030

080006e8 <nrf24_readRegisterMulti>:

// **SPI Register Çoklu Oku**
static void nrf24_readRegisterMulti(uint8_t reg, uint8_t *data, uint8_t length)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6039      	str	r1, [r7, #0]
 80006f0:	0011      	movs	r1, r2
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	1c02      	adds	r2, r0, #0
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
    nrf24_csnLow();
 80006fe:	f000 f837 	bl	8000770 <nrf24_csnLow>
    uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8000702:	210f      	movs	r1, #15
 8000704:	187b      	adds	r3, r7, r1
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&NRF_SPI, &command, 1, 100);
 800070c:	1879      	adds	r1, r7, r1
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <nrf24_readRegisterMulti+0x4c>)
 8000710:	2364      	movs	r3, #100	@ 0x64
 8000712:	2201      	movs	r2, #1
 8000714:	f001 f8ec 	bl	80018f0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&NRF_SPI, data, length, 100);
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	6839      	ldr	r1, [r7, #0]
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <nrf24_readRegisterMulti+0x4c>)
 8000722:	2364      	movs	r3, #100	@ 0x64
 8000724:	f001 fa44 	bl	8001bb0 <HAL_SPI_Receive>
    nrf24_csnHigh();
 8000728:	f000 f814 	bl	8000754 <nrf24_csnHigh>
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b004      	add	sp, #16
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000030 	.word	0x20000030

08000738 <nrf24_ceHigh>:

// **CE Yüksek (Aktif)**
static void nrf24_ceHigh(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_SET);
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <nrf24_ceHigh+0x18>)
 8000742:	2201      	movs	r2, #1
 8000744:	0019      	movs	r1, r3
 8000746:	f000 fba4 	bl	8000e92 <HAL_GPIO_WritePin>
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	48000400 	.word	0x48000400

08000754 <nrf24_csnHigh>:
    HAL_GPIO_WritePin(NRF_CE_PORT, NRF_CE_PIN, GPIO_PIN_RESET);
}

// **CSN Yüksek (İşlem Yok)**
static void nrf24_csnHigh(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_SET);
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <nrf24_csnHigh+0x18>)
 800075e:	2201      	movs	r2, #1
 8000760:	0019      	movs	r1, r3
 8000762:	f000 fb96 	bl	8000e92 <HAL_GPIO_WritePin>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	48000400 	.word	0x48000400

08000770 <nrf24_csnLow>:

// **CSN Düşük (İşlem Başlat)**
static void nrf24_csnLow(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_PORT, NRF_CSN_PIN, GPIO_PIN_RESET);
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <nrf24_csnLow+0x18>)
 800077a:	2200      	movs	r2, #0
 800077c:	0019      	movs	r1, r3
 800077e:	f000 fb88 	bl	8000e92 <HAL_GPIO_WritePin>
}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	48000400 	.word	0x48000400

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x44>)
 8000794:	699a      	ldr	r2, [r3, #24]
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_MspInit+0x44>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	619a      	str	r2, [r3, #24]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_MspInit+0x44>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_MspInit+0x44>)
 80007ac:	69da      	ldr	r2, [r3, #28]
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_MspInit+0x44>)
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	0549      	lsls	r1, r1, #21
 80007b4:	430a      	orrs	r2, r1
 80007b6:	61da      	str	r2, [r3, #28]
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <HAL_MspInit+0x44>)
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	055b      	lsls	r3, r3, #21
 80007c0:	4013      	ands	r3, r2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b08b      	sub	sp, #44	@ 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	2414      	movs	r4, #20
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2314      	movs	r3, #20
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f001 feea 	bl	80025c0 <memset>
  if(hspi->Instance==SPI1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <HAL_SPI_MspInit+0x90>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d131      	bne.n	800085a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	0149      	lsls	r1, r1, #5
 8000800:	430a      	orrs	r2, r1
 8000802:	619a      	str	r2, [r3, #24]
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	015b      	lsls	r3, r3, #5
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	02c9      	lsls	r1, r1, #11
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_SPI_MspInit+0x94>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	02db      	lsls	r3, r3, #11
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800082e:	0021      	movs	r1, r4
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2238      	movs	r2, #56	@ 0x38
 8000834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2202      	movs	r2, #2
 800083a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2203      	movs	r2, #3
 8000846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	187b      	adds	r3, r7, r1
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <HAL_SPI_MspInit+0x98>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f000 f98f 	bl	8000b78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b00b      	add	sp, #44	@ 0x2c
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	40013000 	.word	0x40013000
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f87a 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b0:	f7ff fff7 	bl	80008a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008da:	f001 fe79 	bl	80025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fc9f 	bl	8000220 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008f0:	08002668 	.word	0x08002668
  ldr r2, =_sbss
 80008f4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008f8:	200000a0 	.word	0x200000a0

080008fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_IRQHandler>
	...

08000900 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_Init+0x24>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_Init+0x24>)
 800090a:	2110      	movs	r1, #16
 800090c:	430a      	orrs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f809 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000916:	f7ff ff39 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_InitTick+0x5c>)
 8000932:	681c      	ldr	r4, [r3, #0]
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <HAL_InitTick+0x60>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	0019      	movs	r1, r3
 800093a:	23fa      	movs	r3, #250	@ 0xfa
 800093c:	0098      	lsls	r0, r3, #2
 800093e:	f7ff fbe3 	bl	8000108 <__udivsi3>
 8000942:	0003      	movs	r3, r0
 8000944:	0019      	movs	r1, r3
 8000946:	0020      	movs	r0, r4
 8000948:	f7ff fbde 	bl	8000108 <__udivsi3>
 800094c:	0003      	movs	r3, r0
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f905 	bl	8000b5e <HAL_SYSTICK_Config>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e00f      	b.n	800097c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d80b      	bhi.n	800097a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2301      	movs	r3, #1
 8000966:	425b      	negs	r3, r3
 8000968:	2200      	movs	r2, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f8e2 	bl	8000b34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_InitTick+0x64>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b003      	add	sp, #12
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	20000008 	.word	0x20000008
 8000988:	20000010 	.word	0x20000010
 800098c:	2000000c 	.word	0x2000000c

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	001a      	movs	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	18d2      	adds	r2, r2, r3
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_IncTick+0x20>)
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000010 	.word	0x20000010
 80009b0:	2000009c 	.word	0x2000009c

080009b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	@ (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	2000009c 	.word	0x2000009c

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff fff0 	bl	80009b4 <HAL_GetTick>
 80009d4:	0003      	movs	r3, r0
 80009d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	001a      	movs	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	f7ff ffe0 	bl	80009b4 <HAL_GetTick>
 80009f4:	0002      	movs	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	20000010 	.word	0x20000010

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a24:	d828      	bhi.n	8000a78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	33c0      	adds	r3, #192	@ 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	589b      	ldr	r3, [r3, r2]
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	400a      	ands	r2, r1
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	21ff      	movs	r1, #255	@ 0xff
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	22ff      	movs	r2, #255	@ 0xff
 8000a54:	401a      	ands	r2, r3
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	481f      	ldr	r0, [pc, #124]	@ (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	33c0      	adds	r3, #192	@ 0xc0
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a76:	e031      	b.n	8000adc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0019      	movs	r1, r3
 8000a80:	230f      	movs	r3, #15
 8000a82:	400b      	ands	r3, r1
 8000a84:	3b08      	subs	r3, #8
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3306      	adds	r3, #6
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	3304      	adds	r3, #4
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1dfa      	adds	r2, r7, #7
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	0011      	movs	r1, r2
 8000a98:	2203      	movs	r2, #3
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	21ff      	movs	r1, #255	@ 0xff
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	22ff      	movs	r2, #255	@ 0xff
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4003      	ands	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001c      	movs	r4, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	4023      	ands	r3, r4
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	3306      	adds	r3, #6
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	18c3      	adds	r3, r0, r3
 8000ad8:	3304      	adds	r3, #4
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	045b      	lsls	r3, r3, #17
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d301      	bcc.n	8000b04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b00:	2301      	movs	r3, #1
 8000b02:	e010      	b.n	8000b26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <SysTick_Config+0x44>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2103      	movs	r1, #3
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff7c 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x44>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	1c02      	adds	r2, r0, #0
 8000b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff ffbf 	bl	8000aec <SysTick_Config>
 8000b6e:	0003      	movs	r3, r0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e14f      	b.n	8000e28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <HAL_GPIO_Init+0x28>
 8000b9e:	e140      	b.n	8000e22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d005      	beq.n	8000bb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d130      	bne.n	8000c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bee:	2201      	movs	r2, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	091b      	lsrs	r3, r3, #4
 8000c04:	2201      	movs	r2, #1
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d017      	beq.n	8000c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	43da      	mvns	r2, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d123      	bne.n	8000caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	08da      	lsrs	r2, r3, #3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3208      	adds	r2, #8
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	58d3      	ldr	r3, [r2, r3]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2207      	movs	r2, #7
 8000c74:	4013      	ands	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	220f      	movs	r2, #15
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	400b      	ands	r3, r1
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	6939      	ldr	r1, [r7, #16]
 8000ca8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	401a      	ands	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	23c0      	movs	r3, #192	@ 0xc0
 8000ce4:	029b      	lsls	r3, r3, #10
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d100      	bne.n	8000cec <HAL_GPIO_Init+0x174>
 8000cea:	e09a      	b.n	8000e22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	4b54      	ldr	r3, [pc, #336]	@ (8000e40 <HAL_GPIO_Init+0x2c8>)
 8000cee:	699a      	ldr	r2, [r3, #24]
 8000cf0:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <HAL_GPIO_Init+0x2c8>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	619a      	str	r2, [r3, #24]
 8000cf8:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <HAL_GPIO_Init+0x2c8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d04:	4a4f      	ldr	r2, [pc, #316]	@ (8000e44 <HAL_GPIO_Init+0x2cc>)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	589b      	ldr	r3, [r3, r2]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2203      	movs	r2, #3
 8000d16:	4013      	ands	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	2390      	movs	r3, #144	@ 0x90
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a44      	ldr	r2, [pc, #272]	@ (8000e48 <HAL_GPIO_Init+0x2d0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x1de>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a43      	ldr	r2, [pc, #268]	@ (8000e4c <HAL_GPIO_Init+0x2d4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x1da>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a42      	ldr	r2, [pc, #264]	@ (8000e50 <HAL_GPIO_Init+0x2d8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x1d6>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x1e4>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x1e4>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x1e4>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x1e4>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	2103      	movs	r1, #3
 8000d60:	400a      	ands	r2, r1
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	@ (8000e44 <HAL_GPIO_Init+0x2cc>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2380      	movs	r3, #128	@ 0x80
 8000d90:	035b      	lsls	r3, r3, #13
 8000d92:	4013      	ands	r3, r2
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000da4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	039b      	lsls	r3, r3, #14
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	40da      	lsrs	r2, r3
 8000e30:	1e13      	subs	r3, r2, #0
 8000e32:	d000      	beq.n	8000e36 <HAL_GPIO_Init+0x2be>
 8000e34:	e6a8      	b.n	8000b88 <HAL_GPIO_Init+0x10>
  } 
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b006      	add	sp, #24
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	48000c00 	.word	0x48000c00
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	000a      	movs	r2, r1
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	1cba      	adds	r2, r7, #2
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d004      	beq.n	8000e7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e72:	230f      	movs	r3, #15
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e003      	b.n	8000e84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	781b      	ldrb	r3, [r3, #0]
  }
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	0008      	movs	r0, r1
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	1cbb      	adds	r3, r7, #2
 8000ea0:	1c02      	adds	r2, r0, #0
 8000ea2:	801a      	strh	r2, [r3, #0]
 8000ea4:	1c7b      	adds	r3, r7, #1
 8000ea6:	1c0a      	adds	r2, r1, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eaa:	1c7b      	adds	r3, r7, #1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb2:	1cbb      	adds	r3, r7, #2
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eba:	e003      	b.n	8000ec4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebc:	1cbb      	adds	r3, r7, #2
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	1cb9      	adds	r1, r7, #2
 8000ef0:	8809      	ldrh	r1, [r1, #0]
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e301      	b.n	800151a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d100      	bne.n	8000f22 <HAL_RCC_OscConfig+0x1e>
 8000f20:	e08d      	b.n	800103e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f22:	4bc3      	ldr	r3, [pc, #780]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	220c      	movs	r2, #12
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d00e      	beq.n	8000f4c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f2e:	4bc0      	ldr	r3, [pc, #768]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	220c      	movs	r2, #12
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x64>
 8000f3a:	4bbd      	ldr	r3, [pc, #756]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	025b      	lsls	r3, r3, #9
 8000f42:	401a      	ands	r2, r3
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	025b      	lsls	r3, r3, #9
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10d      	bne.n	8000f68 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	4bb8      	ldr	r3, [pc, #736]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x56>
 8000f58:	e070      	b.n	800103c <HAL_RCC_OscConfig+0x138>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d000      	beq.n	8000f64 <HAL_RCC_OscConfig+0x60>
 8000f62:	e06b      	b.n	800103c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2d8      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d107      	bne.n	8000f80 <HAL_RCC_OscConfig+0x7c>
 8000f70:	4baf      	ldr	r3, [pc, #700]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4bae      	ldr	r3, [pc, #696]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	0249      	lsls	r1, r1, #9
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e02f      	b.n	8000fe0 <HAL_RCC_OscConfig+0xdc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x9e>
 8000f88:	4ba9      	ldr	r3, [pc, #676]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	49a9      	ldr	r1, [pc, #676]	@ (8001234 <HAL_RCC_OscConfig+0x330>)
 8000f90:	400a      	ands	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	4ba6      	ldr	r3, [pc, #664]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4ba5      	ldr	r3, [pc, #660]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	49a7      	ldr	r1, [pc, #668]	@ (8001238 <HAL_RCC_OscConfig+0x334>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e01e      	b.n	8000fe0 <HAL_RCC_OscConfig+0xdc>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xc4>
 8000faa:	4ba1      	ldr	r3, [pc, #644]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4ba0      	ldr	r3, [pc, #640]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	2180      	movs	r1, #128	@ 0x80
 8000fb2:	02c9      	lsls	r1, r1, #11
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	4b9d      	ldr	r3, [pc, #628]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b9c      	ldr	r3, [pc, #624]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0xdc>
 8000fc8:	4b99      	ldr	r3, [pc, #612]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b98      	ldr	r3, [pc, #608]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	4999      	ldr	r1, [pc, #612]	@ (8001234 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4b96      	ldr	r3, [pc, #600]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b95      	ldr	r3, [pc, #596]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	4997      	ldr	r1, [pc, #604]	@ (8001238 <HAL_RCC_OscConfig+0x334>)
 8000fdc:	400a      	ands	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d014      	beq.n	8001012 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fce4 	bl	80009b4 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fcdf 	bl	80009b4 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	@ 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e28a      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	4b8a      	ldr	r3, [pc, #552]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	029b      	lsls	r3, r3, #10
 800100c:	4013      	ands	r3, r2
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0xee>
 8001010:	e015      	b.n	800103e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fccf 	bl	80009b4 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fcca 	bl	80009b4 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	@ 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e275      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	4b80      	ldr	r3, [pc, #512]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	029b      	lsls	r3, r3, #10
 8001036:	4013      	ands	r3, r2
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x118>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x146>
 8001048:	e069      	b.n	800111e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800104a:	4b79      	ldr	r3, [pc, #484]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	220c      	movs	r2, #12
 8001050:	4013      	ands	r3, r2
 8001052:	d00b      	beq.n	800106c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001054:	4b76      	ldr	r3, [pc, #472]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	220c      	movs	r2, #12
 800105a:	4013      	ands	r3, r2
 800105c:	2b08      	cmp	r3, #8
 800105e:	d11c      	bne.n	800109a <HAL_RCC_OscConfig+0x196>
 8001060:	4b73      	ldr	r3, [pc, #460]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	4013      	ands	r3, r2
 800106a:	d116      	bne.n	800109a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106c:	4b70      	ldr	r3, [pc, #448]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2202      	movs	r2, #2
 8001072:	4013      	ands	r3, r2
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x17e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e24b      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b6b      	ldr	r3, [pc, #428]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	22f8      	movs	r2, #248	@ 0xf8
 8001088:	4393      	bics	r3, r2
 800108a:	0019      	movs	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	00da      	lsls	r2, r3, #3
 8001092:	4b67      	ldr	r3, [pc, #412]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001098:	e041      	b.n	800111e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d024      	beq.n	80010ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a2:	4b63      	ldr	r3, [pc, #396]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b62      	ldr	r3, [pc, #392]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc81 	bl	80009b4 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc7c 	bl	80009b4 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e227      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b59      	ldr	r3, [pc, #356]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f1      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	22f8      	movs	r2, #248	@ 0xf8
 80010da:	4393      	bics	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00da      	lsls	r2, r3, #3
 80010e4:	4b52      	ldr	r3, [pc, #328]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e018      	b.n	800111e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ec:	4b50      	ldr	r3, [pc, #320]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	438a      	bics	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc5c 	bl	80009b4 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fc57 	bl	80009b4 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e202      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001114:	4b46      	ldr	r3, [pc, #280]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2202      	movs	r2, #2
 800111a:	4013      	ands	r3, r2
 800111c:	d1f1      	bne.n	8001102 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2208      	movs	r2, #8
 8001124:	4013      	ands	r3, r2
 8001126:	d036      	beq.n	8001196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d019      	beq.n	8001164 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001130:	4b3f      	ldr	r3, [pc, #252]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001134:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fc3a 	bl	80009b4 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff fc35 	bl	80009b4 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1e0      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001158:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	2202      	movs	r2, #2
 800115e:	4013      	ands	r3, r2
 8001160:	d0f1      	beq.n	8001146 <HAL_RCC_OscConfig+0x242>
 8001162:	e018      	b.n	8001196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001164:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001168:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 800116a:	2101      	movs	r1, #1
 800116c:	438a      	bics	r2, r1
 800116e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fc20 	bl	80009b4 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fc1b 	bl	80009b4 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1c6      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d1f1      	bne.n	800117a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2204      	movs	r2, #4
 800119c:	4013      	ands	r3, r2
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x29e>
 80011a0:	e0b4      	b.n	800130c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a2:	201f      	movs	r0, #31
 80011a4:	183b      	adds	r3, r7, r0
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	69da      	ldr	r2, [r3, #28]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	055b      	lsls	r3, r3, #21
 80011b2:	4013      	ands	r3, r2
 80011b4:	d110      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	0549      	lsls	r1, r1, #21
 80011c0:	430a      	orrs	r2, r1
 80011c2:	61da      	str	r2, [r3, #28]
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011d2:	183b      	adds	r3, r7, r0
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4013      	ands	r3, r2
 80011e2:	d11a      	bne.n	800121a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	0049      	lsls	r1, r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbdf 	bl	80009b4 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fc:	f7ff fbda 	bl	80009b4 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	@ 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e185      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_RCC_OscConfig+0x338>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4013      	ands	r3, r2
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d10e      	bne.n	8001240 <HAL_RCC_OscConfig+0x33c>
 8001222:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	4b02      	ldr	r3, [pc, #8]	@ (8001230 <HAL_RCC_OscConfig+0x32c>)
 8001228:	2101      	movs	r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	621a      	str	r2, [r3, #32]
 800122e:	e035      	b.n	800129c <HAL_RCC_OscConfig+0x398>
 8001230:	40021000 	.word	0x40021000
 8001234:	fffeffff 	.word	0xfffeffff
 8001238:	fffbffff 	.word	0xfffbffff
 800123c:	40007000 	.word	0x40007000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_RCC_OscConfig+0x35e>
 8001248:	4bb6      	ldr	r3, [pc, #728]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	4bb5      	ldr	r3, [pc, #724]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800124e:	2101      	movs	r1, #1
 8001250:	438a      	bics	r2, r1
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	4bb3      	ldr	r3, [pc, #716]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	4bb2      	ldr	r3, [pc, #712]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800125a:	2104      	movs	r1, #4
 800125c:	438a      	bics	r2, r1
 800125e:	621a      	str	r2, [r3, #32]
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0x398>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x380>
 800126a:	4bae      	ldr	r3, [pc, #696]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4bad      	ldr	r3, [pc, #692]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001270:	2104      	movs	r1, #4
 8001272:	430a      	orrs	r2, r1
 8001274:	621a      	str	r2, [r3, #32]
 8001276:	4bab      	ldr	r3, [pc, #684]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	4baa      	ldr	r3, [pc, #680]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	621a      	str	r2, [r3, #32]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0x398>
 8001284:	4ba7      	ldr	r3, [pc, #668]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4ba6      	ldr	r3, [pc, #664]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
 8001290:	4ba4      	ldr	r3, [pc, #656]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4ba3      	ldr	r3, [pc, #652]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001296:	2104      	movs	r1, #4
 8001298:	438a      	bics	r2, r1
 800129a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d014      	beq.n	80012ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb86 	bl	80009b4 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e009      	b.n	80012c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb81 	bl	80009b4 <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	4a9b      	ldr	r2, [pc, #620]	@ (8001528 <HAL_RCC_OscConfig+0x624>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e12b      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c2:	4b98      	ldr	r3, [pc, #608]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x3aa>
 80012cc:	e013      	b.n	80012f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb71 	bl	80009b4 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d6:	e009      	b.n	80012ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff fb6c 	bl	80009b4 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a91      	ldr	r2, [pc, #580]	@ (8001528 <HAL_RCC_OscConfig+0x624>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e116      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	2202      	movs	r2, #2
 80012f2:	4013      	ands	r3, r2
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012f6:	231f      	movs	r3, #31
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d105      	bne.n	800130c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001300:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	4b87      	ldr	r3, [pc, #540]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001306:	4989      	ldr	r1, [pc, #548]	@ (800152c <HAL_RCC_OscConfig+0x628>)
 8001308:	400a      	ands	r2, r1
 800130a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2210      	movs	r2, #16
 8001312:	4013      	ands	r3, r2
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d12a      	bne.n	8001374 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800131e:	4b81      	ldr	r3, [pc, #516]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	4b80      	ldr	r3, [pc, #512]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001324:	2104      	movs	r1, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800132a:	4b7e      	ldr	r3, [pc, #504]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800132c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800132e:	4b7d      	ldr	r3, [pc, #500]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb3d 	bl	80009b4 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001340:	f7ff fb38 	bl	80009b4 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0e3      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001352:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d0f1      	beq.n	8001340 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800135c:	4b71      	ldr	r3, [pc, #452]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800135e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001360:	22f8      	movs	r2, #248	@ 0xf8
 8001362:	4393      	bics	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
 8001372:	e034      	b.n	80013de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	3305      	adds	r3, #5
 800137a:	d111      	bne.n	80013a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800137c:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800137e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001380:	4b68      	ldr	r3, [pc, #416]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001382:	2104      	movs	r1, #4
 8001384:	438a      	bics	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800138a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800138c:	22f8      	movs	r2, #248	@ 0xf8
 800138e:	4393      	bics	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	00da      	lsls	r2, r3, #3
 8001398:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	@ 0x34
 800139e:	e01e      	b.n	80013de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013a0:	4b60      	ldr	r3, [pc, #384]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	430a      	orrs	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	438a      	bics	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fafc 	bl	80009b4 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013c2:	f7ff faf7 	bl	80009b4 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0a2      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f1      	bne.n	80013c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d100      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4e4>
 80013e6:	e097      	b.n	8001518 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	220c      	movs	r2, #12
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4f2>
 80013f4:	e06b      	b.n	80014ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d14c      	bne.n	8001498 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b49      	ldr	r3, [pc, #292]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b48      	ldr	r3, [pc, #288]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001404:	494a      	ldr	r1, [pc, #296]	@ (8001530 <HAL_RCC_OscConfig+0x62c>)
 8001406:	400a      	ands	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fad3 	bl	80009b4 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff face 	bl	80009b4 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e079      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	049b      	lsls	r3, r3, #18
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001432:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	220f      	movs	r2, #15
 8001438:	4393      	bics	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001440:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001442:	430a      	orrs	r2, r1
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a3a      	ldr	r2, [pc, #232]	@ (8001534 <HAL_RCC_OscConfig+0x630>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	431a      	orrs	r2, r3
 800145a:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001460:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 8001466:	2180      	movs	r1, #128	@ 0x80
 8001468:	0449      	lsls	r1, r1, #17
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff faa1 	bl	80009b4 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa9c 	bl	80009b4 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e047      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	049b      	lsls	r3, r3, #18
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x574>
 8001496:	e03f      	b.n	8001518 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 800149e:	4924      	ldr	r1, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x62c>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa86 	bl	80009b4 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fa81 	bl	80009b4 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e02c      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	049b      	lsls	r3, r3, #18
 80014c8:	4013      	ands	r3, r2
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x5aa>
 80014cc:	e024      	b.n	8001518 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e01f      	b.n	800151a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_RCC_OscConfig+0x620>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d10e      	bne.n	8001514 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	220f      	movs	r2, #15
 80014fa:	401a      	ands	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	23f0      	movs	r3, #240	@ 0xf0
 8001508:	039b      	lsls	r3, r3, #14
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b008      	add	sp, #32
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	40021000 	.word	0x40021000
 8001528:	00001388 	.word	0x00001388
 800152c:	efffffff 	.word	0xefffffff
 8001530:	feffffff 	.word	0xfeffffff
 8001534:	ffc2ffff 	.word	0xffc2ffff

08001538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b3      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b5b      	ldr	r3, [pc, #364]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d911      	bls.n	800157e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	4393      	bics	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	4b55      	ldr	r3, [pc, #340]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156c:	4b53      	ldr	r3, [pc, #332]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e09a      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d015      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2204      	movs	r2, #4
 800158e:	4013      	ands	r3, r2
 8001590:	d006      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001592:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 8001598:	21e0      	movs	r1, #224	@ 0xe0
 800159a:	00c9      	lsls	r1, r1, #3
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b47      	ldr	r3, [pc, #284]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	22f0      	movs	r2, #240	@ 0xf0
 80015a6:	4393      	bics	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	4b44      	ldr	r3, [pc, #272]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d040      	beq.n	8001640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d114      	bne.n	80015fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06e      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	049b      	lsls	r3, r3, #18
 80015e6:	4013      	ands	r3, r2
 80015e8:	d108      	bne.n	80015fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e062      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e05b      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	4393      	bics	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff f9d0 	bl	80009b4 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001618:	e009      	b.n	800162e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7ff f9cb 	bl	80009b4 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a27      	ldr	r2, [pc, #156]	@ (80016c4 <HAL_RCC_ClockConfig+0x18c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e042      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	220c      	movs	r2, #12
 8001634:	401a      	ands	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1ec      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d211      	bcs.n	8001672 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_RCC_ClockConfig+0x184>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	4013      	ands	r3, r2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e020      	b.n	80016b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2204      	movs	r2, #4
 8001678:	4013      	ands	r3, r2
 800167a:	d009      	beq.n	8001690 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_RCC_ClockConfig+0x190>)
 8001682:	4013      	ands	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001690:	f000 f820 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001694:	0001      	movs	r1, r0
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_RCC_ClockConfig+0x188>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	220f      	movs	r2, #15
 800169e:	4013      	ands	r3, r2
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <HAL_RCC_ClockConfig+0x194>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	000a      	movs	r2, r1
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_RCC_ClockConfig+0x198>)
 80016aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f7ff f93b 	bl	8000928 <HAL_InitTick>
  
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	00001388 	.word	0x00001388
 80016c8:	fffff8ff 	.word	0xfffff8ff
 80016cc:	08002630 	.word	0x08002630
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	220c      	movs	r2, #12
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d002      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x30>
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d003      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x36>
 8001702:	e02c      	b.n	800175e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001706:	613b      	str	r3, [r7, #16]
      break;
 8001708:	e02c      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	220f      	movs	r2, #15
 8001710:	4013      	ands	r3, r2
 8001712:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x9c>)
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	220f      	movs	r2, #15
 800171e:	4013      	ands	r3, r2
 8001720:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	4013      	ands	r3, r2
 800172e:	d009      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4810      	ldr	r0, [pc, #64]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001734:	f7fe fce8 	bl	8000108 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4353      	muls	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e009      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	000a      	movs	r2, r1
 8001748:	0152      	lsls	r2, r2, #5
 800174a:	1a52      	subs	r2, r2, r1
 800174c:	0193      	lsls	r3, r2, #6
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	185b      	adds	r3, r3, r1
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
      break;
 800175c:	e002      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001760:	613b      	str	r3, [r7, #16]
      break;
 8001762:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001764:	693b      	ldr	r3, [r7, #16]
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b006      	add	sp, #24
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40021000 	.word	0x40021000
 8001774:	007a1200 	.word	0x007a1200
 8001778:	08002640 	.word	0x08002640
 800177c:	08002650 	.word	0x08002650

08001780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0a8      	b.n	80018e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2382      	movs	r3, #130	@ 0x82
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d009      	beq.n	80017ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
 80017ac:	e005      	b.n	80017ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	225d      	movs	r2, #93	@ 0x5d
 80017c4:	5c9b      	ldrb	r3, [r3, r2]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	225c      	movs	r2, #92	@ 0x5c
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7fe fffc 	bl	80007d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	225d      	movs	r2, #93	@ 0x5d
 80017e0:	2102      	movs	r1, #2
 80017e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	438a      	bics	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	23e0      	movs	r3, #224	@ 0xe0
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d902      	bls.n	8001806 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e002      	b.n	800180c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	23f0      	movs	r3, #240	@ 0xf0
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	429a      	cmp	r2, r3
 8001816:	d008      	beq.n	800182a <HAL_SPI_Init+0xaa>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	23e0      	movs	r3, #224	@ 0xe0
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	429a      	cmp	r2, r3
 8001822:	d002      	beq.n	800182a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	2382      	movs	r3, #130	@ 0x82
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	2384      	movs	r3, #132	@ 0x84
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	400b      	ands	r3, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2102      	movs	r1, #2
 8001846:	400b      	ands	r3, r1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2101      	movs	r1, #1
 8001850:	400b      	ands	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6999      	ldr	r1, [r3, #24]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	400b      	ands	r3, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2138      	movs	r1, #56	@ 0x38
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	400b      	ands	r3, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	0011      	movs	r1, r2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	2204      	movs	r2, #4
 8001890:	401a      	ands	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	2110      	movs	r1, #16
 8001898:	400b      	ands	r3, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a0:	2108      	movs	r1, #8
 80018a2:	400b      	ands	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	23f0      	movs	r3, #240	@ 0xf0
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	400b      	ands	r3, r1
 80018b0:	431a      	orrs	r2, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	015b      	lsls	r3, r3, #5
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4907      	ldr	r1, [pc, #28]	@ (80018ec <HAL_SPI_Init+0x16c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	225d      	movs	r2, #93	@ 0x5d
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	fffff7ff 	.word	0xfffff7ff

080018f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	1dbb      	adds	r3, r7, #6
 80018fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001900:	231f      	movs	r3, #31
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	225c      	movs	r2, #92	@ 0x5c
 800190c:	5c9b      	ldrb	r3, [r3, r2]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_SPI_Transmit+0x26>
 8001912:	2302      	movs	r3, #2
 8001914:	e147      	b.n	8001ba6 <HAL_SPI_Transmit+0x2b6>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	225c      	movs	r2, #92	@ 0x5c
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800191e:	f7ff f849 	bl	80009b4 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001926:	2316      	movs	r3, #22
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	1dba      	adds	r2, r7, #6
 800192c:	8812      	ldrh	r2, [r2, #0]
 800192e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	225d      	movs	r2, #93	@ 0x5d
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d004      	beq.n	8001946 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800193c:	231f      	movs	r3, #31
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
    goto error;
 8001944:	e128      	b.n	8001b98 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_SPI_Transmit+0x64>
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d104      	bne.n	800195e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001954:	231f      	movs	r3, #31
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
    goto error;
 800195c:	e11c      	b.n	8001b98 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	225d      	movs	r2, #93	@ 0x5d
 8001962:	2103      	movs	r1, #3
 8001964:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1dba      	adds	r2, r7, #6
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1dba      	adds	r2, r7, #6
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2244      	movs	r2, #68	@ 0x44
 800198c:	2100      	movs	r1, #0
 800198e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2246      	movs	r2, #70	@ 0x46
 8001994:	2100      	movs	r1, #0
 8001996:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d110      	bne.n	80019d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2140      	movs	r1, #64	@ 0x40
 80019bc:	438a      	bics	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	01c9      	lsls	r1, r1, #7
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2240      	movs	r2, #64	@ 0x40
 80019da:	4013      	ands	r3, r2
 80019dc:	2b40      	cmp	r3, #64	@ 0x40
 80019de:	d007      	beq.n	80019f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2140      	movs	r1, #64	@ 0x40
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	23e0      	movs	r3, #224	@ 0xe0
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d952      	bls.n	8001aa2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_SPI_Transmit+0x11e>
 8001a04:	2316      	movs	r3, #22
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d143      	bne.n	8001a96 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1e:	1c9a      	adds	r2, r3, #2
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a32:	e030      	b.n	8001a96 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d112      	bne.n	8001a68 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	1c9a      	adds	r2, r3, #2
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a66:	e016      	b.n	8001a96 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a68:	f7fe ffa4 	bl	80009b4 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d802      	bhi.n	8001a7e <HAL_SPI_Transmit+0x18e>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_SPI_Transmit+0x194>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001a84:	231f      	movs	r3, #31
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2203      	movs	r2, #3
 8001a8a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	225d      	movs	r2, #93	@ 0x5d
 8001a90:	2101      	movs	r1, #1
 8001a92:	5499      	strb	r1, [r3, r2]
          goto error;
 8001a94:	e080      	b.n	8001b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1c9      	bne.n	8001a34 <HAL_SPI_Transmit+0x144>
 8001aa0:	e053      	b.n	8001b4a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_SPI_Transmit+0x1c4>
 8001aaa:	2316      	movs	r3, #22
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d145      	bne.n	8001b40 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	330c      	adds	r3, #12
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ada:	e031      	b.n	8001b40 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d113      	bne.n	8001b12 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	330c      	adds	r3, #12
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b10:	e016      	b.n	8001b40 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b12:	f7fe ff4f 	bl	80009b4 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d802      	bhi.n	8001b28 <HAL_SPI_Transmit+0x238>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_SPI_Transmit+0x23e>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001b2e:	231f      	movs	r3, #31
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2203      	movs	r2, #3
 8001b34:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	225d      	movs	r2, #93	@ 0x5d
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b3e:	e02b      	b.n	8001b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1c8      	bne.n	8001adc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fcef 	bl	8002534 <SPI_EndRxTxTransaction>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001b86:	231f      	movs	r3, #31
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e003      	b.n	8001b98 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	225d      	movs	r2, #93	@ 0x5d
 8001b94:	2101      	movs	r1, #1
 8001b96:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	225c      	movs	r2, #92	@ 0x5c
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001ba0:	231f      	movs	r3, #31
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b008      	add	sp, #32
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bc0:	2117      	movs	r1, #23
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	225d      	movs	r2, #93	@ 0x5d
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d003      	beq.n	8001bdc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bda:	e12b      	b.n	8001e34 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	2382      	movs	r3, #130	@ 0x82
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d113      	bne.n	8001c10 <HAL_SPI_Receive+0x60>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10f      	bne.n	8001c10 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	225d      	movs	r2, #93	@ 0x5d
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	881c      	ldrh	r4, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	0023      	movs	r3, r4
 8001c08:	f000 f924 	bl	8001e54 <HAL_SPI_TransmitReceive>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	e118      	b.n	8001e42 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	225c      	movs	r2, #92	@ 0x5c
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Receive+0x6e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e111      	b.n	8001e42 <HAL_SPI_Receive+0x292>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	225c      	movs	r2, #92	@ 0x5c
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c26:	f7fe fec5 	bl	80009b4 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_SPI_Receive+0x8c>
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001c3c:	2317      	movs	r3, #23
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c44:	e0f6      	b.n	8001e34 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	225d      	movs	r2, #93	@ 0x5d
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1dba      	adds	r2, r7, #6
 8001c5e:	2144      	movs	r1, #68	@ 0x44
 8001c60:	8812      	ldrh	r2, [r2, #0]
 8001c62:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1dba      	adds	r2, r7, #6
 8001c68:	2146      	movs	r1, #70	@ 0x46
 8001c6a:	8812      	ldrh	r2, [r2, #0]
 8001c6c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	23e0      	movs	r3, #224	@ 0xe0
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d908      	bls.n	8001caa <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	496a      	ldr	r1, [pc, #424]	@ (8001e4c <HAL_SPI_Receive+0x29c>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	e008      	b.n	8001cbc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2180      	movs	r1, #128	@ 0x80
 8001cb6:	0149      	lsls	r1, r1, #5
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2140      	movs	r1, #64	@ 0x40
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	495b      	ldr	r1, [pc, #364]	@ (8001e50 <HAL_SPI_Receive+0x2a0>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2240      	movs	r2, #64	@ 0x40
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b40      	cmp	r3, #64	@ 0x40
 8001cf4:	d007      	beq.n	8001d06 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2140      	movs	r1, #64	@ 0x40
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	23e0      	movs	r3, #224	@ 0xe0
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d900      	bls.n	8001d14 <HAL_SPI_Receive+0x164>
 8001d12:	e071      	b.n	8001df8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d14:	e035      	b.n	8001d82 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d117      	bne.n	8001d54 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2246      	movs	r2, #70	@ 0x46
 8001d44:	5a9b      	ldrh	r3, [r3, r2]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2246      	movs	r2, #70	@ 0x46
 8001d50:	5299      	strh	r1, [r3, r2]
 8001d52:	e016      	b.n	8001d82 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d54:	f7fe fe2e 	bl	80009b4 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d802      	bhi.n	8001d6a <HAL_SPI_Receive+0x1ba>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_SPI_Receive+0x1c0>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001d70:	2317      	movs	r3, #23
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2203      	movs	r2, #3
 8001d76:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	225d      	movs	r2, #93	@ 0x5d
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001d80:	e058      	b.n	8001e34 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2246      	movs	r2, #70	@ 0x46
 8001d86:	5a9b      	ldrh	r3, [r3, r2]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1c3      	bne.n	8001d16 <HAL_SPI_Receive+0x166>
 8001d8e:	e039      	b.n	8001e04 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d115      	bne.n	8001dca <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	b292      	uxth	r2, r2
 8001daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	1c9a      	adds	r2, r3, #2
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2246      	movs	r2, #70	@ 0x46
 8001dba:	5a9b      	ldrh	r3, [r3, r2]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2246      	movs	r2, #70	@ 0x46
 8001dc6:	5299      	strh	r1, [r3, r2]
 8001dc8:	e016      	b.n	8001df8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dca:	f7fe fdf3 	bl	80009b4 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d802      	bhi.n	8001de0 <HAL_SPI_Receive+0x230>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_SPI_Receive+0x236>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001de6:	2317      	movs	r3, #23
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2203      	movs	r2, #3
 8001dec:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	225d      	movs	r2, #93	@ 0x5d
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
          goto error;
 8001df6:	e01d      	b.n	8001e34 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2246      	movs	r2, #70	@ 0x46
 8001dfc:	5a9b      	ldrh	r3, [r3, r2]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1c5      	bne.n	8001d90 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fb34 	bl	8002478 <SPI_EndRxTransaction>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001e22:	2317      	movs	r3, #23
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e003      	b.n	8001e34 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	225d      	movs	r2, #93	@ 0x5d
 8001e30:	2101      	movs	r1, #1
 8001e32:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	225c      	movs	r2, #92	@ 0x5c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b007      	add	sp, #28
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	ffffefff 	.word	0xffffefff
 8001e50:	ffffbfff 	.word	0xffffbfff

08001e54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	001a      	movs	r2, r3
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e66:	2301      	movs	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e6a:	2323      	movs	r3, #35	@ 0x23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	225c      	movs	r2, #92	@ 0x5c
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x2c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e1c4      	b.n	800220a <HAL_SPI_TransmitReceive+0x3b6>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	225c      	movs	r2, #92	@ 0x5c
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e88:	f7fe fd94 	bl	80009b4 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e90:	201b      	movs	r0, #27
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	215d      	movs	r1, #93	@ 0x5d
 8001e98:	5c52      	ldrb	r2, [r2, r1]
 8001e9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	1cba      	adds	r2, r7, #2
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d011      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x84>
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2382      	movs	r3, #130	@ 0x82
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d107      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x7a>
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d004      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001ece:	2323      	movs	r3, #35	@ 0x23
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ed6:	e191      	b.n	80021fc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x98>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x98>
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001eec:	2323      	movs	r3, #35	@ 0x23
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ef4:	e182      	b.n	80021fc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	225d      	movs	r2, #93	@ 0x5d
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d003      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225d      	movs	r2, #93	@ 0x5d
 8001f06:	2105      	movs	r1, #5
 8001f08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1cba      	adds	r2, r7, #2
 8001f1a:	2146      	movs	r1, #70	@ 0x46
 8001f1c:	8812      	ldrh	r2, [r2, #0]
 8001f1e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1cba      	adds	r2, r7, #2
 8001f24:	2144      	movs	r1, #68	@ 0x44
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1cba      	adds	r2, r7, #2
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1cba      	adds	r2, r7, #2
 8001f3c:	8812      	ldrh	r2, [r2, #0]
 8001f3e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	23e0      	movs	r3, #224	@ 0xe0
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d908      	bls.n	8001f6a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	49ac      	ldr	r1, [pc, #688]	@ (8002214 <HAL_SPI_TransmitReceive+0x3c0>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	e008      	b.n	8001f7c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2180      	movs	r1, #128	@ 0x80
 8001f76:	0149      	lsls	r1, r1, #5
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	d007      	beq.n	8001f9a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2140      	movs	r1, #64	@ 0x40
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	23e0      	movs	r3, #224	@ 0xe0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d800      	bhi.n	8001fa8 <HAL_SPI_TransmitReceive+0x154>
 8001fa6:	e083      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_SPI_TransmitReceive+0x168>
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d000      	beq.n	8001fbc <HAL_SPI_TransmitReceive+0x168>
 8001fba:	e06d      	b.n	8002098 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	881a      	ldrh	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	1c9a      	adds	r2, r3, #2
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fe0:	e05a      	b.n	8002098 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d11b      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x1d4>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_SPI_TransmitReceive+0x1d4>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d113      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002010:	1c9a      	adds	r2, r3, #2
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	2b01      	cmp	r3, #1
 8002034:	d11c      	bne.n	8002070 <HAL_SPI_TransmitReceive+0x21c>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2246      	movs	r2, #70	@ 0x46
 800203a:	5a9b      	ldrh	r3, [r3, r2]
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	b292      	uxth	r2, r2
 800204e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	1c9a      	adds	r2, r3, #2
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2246      	movs	r2, #70	@ 0x46
 800205e:	5a9b      	ldrh	r3, [r3, r2]
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b299      	uxth	r1, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2246      	movs	r2, #70	@ 0x46
 800206a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800206c:	2301      	movs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002070:	f7fe fca0 	bl	80009b4 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800207c:	429a      	cmp	r2, r3
 800207e:	d80b      	bhi.n	8002098 <HAL_SPI_TransmitReceive+0x244>
 8002080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002082:	3301      	adds	r3, #1
 8002084:	d008      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002086:	2323      	movs	r3, #35	@ 0x23
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2203      	movs	r2, #3
 800208c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	225d      	movs	r2, #93	@ 0x5d
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
        goto error;
 8002096:	e0b1      	b.n	80021fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d19f      	bne.n	8001fe2 <HAL_SPI_TransmitReceive+0x18e>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2246      	movs	r2, #70	@ 0x46
 80020a6:	5a9b      	ldrh	r3, [r3, r2]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d199      	bne.n	8001fe2 <HAL_SPI_TransmitReceive+0x18e>
 80020ae:	e089      	b.n	80021c4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x270>
 80020b8:	2312      	movs	r3, #18
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d000      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x270>
 80020c2:	e074      	b.n	80021ae <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ea:	e060      	b.n	80021ae <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d11c      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x2e0>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d017      	beq.n	8002134 <HAL_SPI_TransmitReceive+0x2e0>
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	2b01      	cmp	r3, #1
 8002108:	d114      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	330c      	adds	r3, #12
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	2b01      	cmp	r3, #1
 8002140:	d11e      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x32c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2246      	movs	r2, #70	@ 0x46
 8002146:	5a9b      	ldrh	r3, [r3, r2]
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d018      	beq.n	8002180 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	001a      	movs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2246      	movs	r2, #70	@ 0x46
 800216e:	5a9b      	ldrh	r3, [r3, r2]
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b299      	uxth	r1, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2246      	movs	r2, #70	@ 0x46
 800217a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002180:	f7fe fc18 	bl	80009b4 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800218c:	429a      	cmp	r2, r3
 800218e:	d802      	bhi.n	8002196 <HAL_SPI_TransmitReceive+0x342>
 8002190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002192:	3301      	adds	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_SPI_TransmitReceive+0x348>
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	2b00      	cmp	r3, #0
 800219a:	d108      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800219c:	2323      	movs	r3, #35	@ 0x23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	225d      	movs	r2, #93	@ 0x5d
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]
        goto error;
 80021ac:	e026      	b.n	80021fc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d199      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x298>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2246      	movs	r2, #70	@ 0x46
 80021bc:	5a9b      	ldrh	r3, [r3, r2]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d193      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f9b2 	bl	8002534 <SPI_EndRxTxTransaction>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80021d4:	2323      	movs	r3, #35	@ 0x23
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80021ea:	2323      	movs	r3, #35	@ 0x23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e003      	b.n	80021fc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	225d      	movs	r2, #93	@ 0x5d
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	225c      	movs	r2, #92	@ 0x5c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002204:	2323      	movs	r3, #35	@ 0x23
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b00a      	add	sp, #40	@ 0x28
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	ffffefff 	.word	0xffffefff

08002218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002228:	f7fe fbc4 	bl	80009b4 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002238:	f7fe fbbc 	bl	80009b4 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	0d1b      	lsrs	r3, r3, #20
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4353      	muls	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800224e:	e058      	b.n	8002302 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	d055      	beq.n	8002302 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002256:	f7fe fbad 	bl	80009b4 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	429a      	cmp	r2, r3
 8002264:	d902      	bls.n	800226c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d142      	bne.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	21e0      	movs	r1, #224	@ 0xe0
 8002278:	438a      	bics	r2, r1
 800227a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2382      	movs	r3, #130	@ 0x82
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	429a      	cmp	r2, r3
 8002286:	d113      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	429a      	cmp	r2, r3
 8002292:	d005      	beq.n	80022a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b4:	2380      	movs	r3, #128	@ 0x80
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d110      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	491a      	ldr	r1, [pc, #104]	@ (8002330 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	0189      	lsls	r1, r1, #6
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	225d      	movs	r2, #93	@ 0x5d
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	225c      	movs	r2, #92	@ 0x5c
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e017      	b.n	8002322 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3b01      	subs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	425a      	negs	r2, r3
 8002312:	4153      	adcs	r3, r2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	001a      	movs	r2, r3
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d197      	bne.n	8002250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b008      	add	sp, #32
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	20000008 	.word	0x20000008
 8002330:	ffffdfff 	.word	0xffffdfff

08002334 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002342:	2317      	movs	r3, #23
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800234a:	f7fe fb33 	bl	80009b4 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	18d3      	adds	r3, r2, r3
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800235a:	f7fe fb2b 	bl	80009b4 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	330c      	adds	r3, #12
 8002368:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	0013      	movs	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	189b      	adds	r3, r3, r2
 8002374:	00da      	lsls	r2, r3, #3
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	0d1b      	lsrs	r3, r3, #20
 800237a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237c:	4353      	muls	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002380:	e068      	b.n	8002454 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	23c0      	movs	r3, #192	@ 0xc0
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	429a      	cmp	r2, r3
 800238a:	d10a      	bne.n	80023a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	2117      	movs	r1, #23
 800239a:	187b      	adds	r3, r7, r1
 800239c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	d055      	beq.n	8002454 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a8:	f7fe fb04 	bl	80009b4 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d902      	bls.n	80023be <SPI_WaitFifoStateUntilTimeout+0x8a>
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d142      	bne.n	8002444 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	21e0      	movs	r1, #224	@ 0xe0
 80023ca:	438a      	bics	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	2382      	movs	r3, #130	@ 0x82
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d113      	bne.n	8002402 <SPI_WaitFifoStateUntilTimeout+0xce>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d005      	beq.n	80023f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d107      	bne.n	8002402 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2140      	movs	r1, #64	@ 0x40
 80023fe:	438a      	bics	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	429a      	cmp	r2, r3
 800240c:	d110      	bne.n	8002430 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4916      	ldr	r1, [pc, #88]	@ (8002474 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	0189      	lsls	r1, r1, #6
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	225d      	movs	r2, #93	@ 0x5d
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	225c      	movs	r2, #92	@ 0x5c
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e010      	b.n	8002466 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	3b01      	subs	r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	d18e      	bne.n	8002382 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b00a      	add	sp, #40	@ 0x28
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	20000008 	.word	0x20000008
 8002474:	ffffdfff 	.word	0xffffdfff

08002478 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	2382      	movs	r3, #130	@ 0x82
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	429a      	cmp	r2, r3
 800248e:	d113      	bne.n	80024b8 <SPI_EndRxTransaction+0x40>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	429a      	cmp	r2, r3
 800249a:	d005      	beq.n	80024a8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2140      	movs	r1, #64	@ 0x40
 80024b4:	438a      	bics	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	0013      	movs	r3, r2
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	f7ff fea7 	bl	8002218 <SPI_WaitFlagStateUntilTimeout>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d007      	beq.n	80024de <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	2220      	movs	r2, #32
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e026      	b.n	800252c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2382      	movs	r3, #130	@ 0x82
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d11f      	bne.n	800252a <SPI_EndRxTransaction+0xb2>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d005      	beq.n	8002502 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	429a      	cmp	r2, r3
 8002500:	d113      	bne.n	800252a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	23c0      	movs	r3, #192	@ 0xc0
 8002506:	00d9      	lsls	r1, r3, #3
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	0013      	movs	r3, r2
 8002510:	2200      	movs	r2, #0
 8002512:	f7ff ff0f 	bl	8002334 <SPI_WaitFifoStateUntilTimeout>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d007      	beq.n	800252a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	2220      	movs	r2, #32
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e000      	b.n	800252c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}

08002534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	23c0      	movs	r3, #192	@ 0xc0
 8002544:	0159      	lsls	r1, r3, #5
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	0013      	movs	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	f7ff fef0 	bl	8002334 <SPI_WaitFifoStateUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d007      	beq.n	8002568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	2220      	movs	r2, #32
 800255e:	431a      	orrs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e027      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	0013      	movs	r3, r2
 8002572:	2200      	movs	r2, #0
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	f7ff fe4f 	bl	8002218 <SPI_WaitFlagStateUntilTimeout>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d007      	beq.n	800258e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	2220      	movs	r2, #32
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e014      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	23c0      	movs	r3, #192	@ 0xc0
 8002592:	00d9      	lsls	r1, r3, #3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	0013      	movs	r3, r2
 800259c:	2200      	movs	r2, #0
 800259e:	f7ff fec9 	bl	8002334 <SPI_WaitFifoStateUntilTimeout>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d007      	beq.n	80025b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	2220      	movs	r2, #32
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e000      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}

080025c0 <memset>:
 80025c0:	0003      	movs	r3, r0
 80025c2:	1882      	adds	r2, r0, r2
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d100      	bne.n	80025ca <memset+0xa>
 80025c8:	4770      	bx	lr
 80025ca:	7019      	strb	r1, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	e7f9      	b.n	80025c4 <memset+0x4>

080025d0 <__libc_init_array>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	2600      	movs	r6, #0
 80025d4:	4c0c      	ldr	r4, [pc, #48]	@ (8002608 <__libc_init_array+0x38>)
 80025d6:	4d0d      	ldr	r5, [pc, #52]	@ (800260c <__libc_init_array+0x3c>)
 80025d8:	1b64      	subs	r4, r4, r5
 80025da:	10a4      	asrs	r4, r4, #2
 80025dc:	42a6      	cmp	r6, r4
 80025de:	d109      	bne.n	80025f4 <__libc_init_array+0x24>
 80025e0:	2600      	movs	r6, #0
 80025e2:	f000 f819 	bl	8002618 <_init>
 80025e6:	4c0a      	ldr	r4, [pc, #40]	@ (8002610 <__libc_init_array+0x40>)
 80025e8:	4d0a      	ldr	r5, [pc, #40]	@ (8002614 <__libc_init_array+0x44>)
 80025ea:	1b64      	subs	r4, r4, r5
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d105      	bne.n	80025fe <__libc_init_array+0x2e>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	00b3      	lsls	r3, r6, #2
 80025f6:	58eb      	ldr	r3, [r5, r3]
 80025f8:	4798      	blx	r3
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7ee      	b.n	80025dc <__libc_init_array+0xc>
 80025fe:	00b3      	lsls	r3, r6, #2
 8002600:	58eb      	ldr	r3, [r5, r3]
 8002602:	4798      	blx	r3
 8002604:	3601      	adds	r6, #1
 8002606:	e7f2      	b.n	80025ee <__libc_init_array+0x1e>
 8002608:	08002660 	.word	0x08002660
 800260c:	08002660 	.word	0x08002660
 8002610:	08002664 	.word	0x08002664
 8002614:	08002660 	.word	0x08002660

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
